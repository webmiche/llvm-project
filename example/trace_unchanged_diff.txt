*** IR Dump After Annotation2MetadataPass on [module] omitted because no change ***
*** IR Dump After ForceFunctionAttrsPass on [module] omitted because no change ***
*** IR Dump After InferFunctionAttrsPass on [module] ***
; ModuleID = 'implicit_preprocessed.ll'
source_filename = "implicit_preprocessed.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@g = dso_local global i32 0, align 4, !dbg !0
@d = dso_local global i32 0, align 4, !dbg !5

; Function Attrs: minsize nounwind optsize sspstrong uwtable
define dso_local i32 @foo() #0 !dbg !15 {
  %1 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr %1) #4, !dbg !21
  call void @llvm.dbg.declare(metadata ptr %1, metadata !19, metadata !DIExpression()), !dbg !22
  %2 = call ptr @malloc(i64 noundef 8) #5, !dbg !23
  store ptr %2, ptr %1, align 8, !dbg !22, !tbaa !24
  br label %3, !dbg !28

3:                                                ; preds = %23, %0
  %4 = load i32, ptr @g, align 4, !dbg !29, !tbaa !30
  %5 = icmp ne i32 %4, 0, !dbg !28
  br i1 %5, label %6, label %24, !dbg !28

6:                                                ; preds = %3
  %7 = load i32, ptr @d, align 4, !dbg !32, !tbaa !30
  %8 = icmp ne i32 %7, 0, !dbg !32
  br i1 %8, label %9, label %23, !dbg !34

9:                                                ; preds = %6
  %10 = load ptr, ptr %1, align 8, !dbg !35, !tbaa !24
  %11 = getelementptr inbounds i32, ptr %10, i64 0, !dbg !35
  %12 = load i32, ptr %11, align 4, !dbg !37, !tbaa !30
  %13 = add nsw i32 %12, 1, !dbg !37
  store i32 %13, ptr %11, align 4, !dbg !37, !tbaa !30
  store i32 0, ptr @d, align 4, !dbg !38, !tbaa !30
  %14 = load ptr, ptr %1, align 8, !dbg !39, !tbaa !24
  %15 = getelementptr inbounds i32, ptr %14, i64 0, !dbg !39
  %16 = load i32, ptr %15, align 4, !dbg !39, !tbaa !30
  %17 = load i32, ptr @g, align 4, !dbg !41, !tbaa !30
  %18 = icmp eq i32 %16, %17, !dbg !42
  br i1 %18, label %19, label %22, !dbg !43

19:                                               ; preds = %9
  %20 = load ptr, ptr %1, align 8, !dbg !44, !tbaa !24
  %21 = getelementptr inbounds i32, ptr %20, i64 0, !dbg !44
  store i32 0, ptr %21, align 4, !dbg !45, !tbaa !30
  br label %22, !dbg !44

22:                                               ; preds = %19, %9
  br label %23, !dbg !46

23:                                               ; preds = %22, %6
  br label %3, !dbg !28, !llvm.loop !47

24:                                               ; preds = %3
  %25 = load i32, ptr @d, align 4, !dbg !50, !tbaa !30
  call void @llvm.lifetime.end.p0(i64 8, ptr %1) #4, !dbg !51
  ret i32 %25, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #2

; Function Attrs: minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

attributes #0 = { minsize nounwind optsize sspstrong uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind }
attributes #5 = { minsize optsize allocsize(0) }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!8, !9, !10, !11, !12, !13}
!llvm.ident = !{!14}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "g", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 15.0.7", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, globals: !4, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "implicit_preprocessed.c", directory: "/home/michel/ETH/AST/llvm-project/example", checksumkind: CSK_MD5, checksum: "81ce551684fbaa4f3b88065f26c1ce40")
!4 = !{!5, !0}
!5 = !DIGlobalVariableExpression(var: !6, expr: !DIExpression())
!6 = distinct !DIGlobalVariable(name: "d", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !{i32 7, !"Dwarf Version", i32 5}
!9 = !{i32 2, !"Debug Info Version", i32 3}
!10 = !{i32 1, !"wchar_size", i32 4}
!11 = !{i32 8, !"PIC Level", i32 2}
!12 = !{i32 7, !"PIE Level", i32 2}
!13 = !{i32 7, !"uwtable", i32 2}
!14 = !{!"clang version 15.0.7"}
!15 = distinct !DISubprogram(name: "foo", scope: !3, file: !3, line: 2, type: !16, scopeLine: 2, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !18)
!16 = !DISubroutineType(types: !17)
!17 = !{!7}
!18 = !{!19}
!19 = !DILocalVariable(name: "i", scope: !15, file: !3, line: 3, type: !20)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!21 = !DILocation(line: 3, column: 3, scope: !15)
!22 = !DILocation(line: 3, column: 8, scope: !15)
!23 = !DILocation(line: 3, column: 12, scope: !15)
!24 = !{!25, !25, i64 0}
!25 = !{!"any pointer", !26, i64 0}
!26 = !{!"omnipotent char", !27, i64 0}
!27 = !{!"Simple C/C++ TBAA"}
!28 = !DILocation(line: 4, column: 3, scope: !15)
!29 = !DILocation(line: 4, column: 10, scope: !15)
!30 = !{!31, !31, i64 0}
!31 = !{!"int", !26, i64 0}
!32 = !DILocation(line: 5, column: 9, scope: !33)
!33 = distinct !DILexicalBlock(scope: !15, file: !3, line: 5, column: 9)
!34 = !DILocation(line: 5, column: 9, scope: !15)
!35 = !DILocation(line: 6, column: 7, scope: !36)
!36 = distinct !DILexicalBlock(scope: !33, file: !3, line: 5, column: 12)
!37 = !DILocation(line: 6, column: 11, scope: !36)
!38 = !DILocation(line: 7, column: 9, scope: !36)
!39 = !DILocation(line: 8, column: 11, scope: !40)
!40 = distinct !DILexicalBlock(scope: !36, file: !3, line: 8, column: 11)
!41 = !DILocation(line: 8, column: 19, scope: !40)
!42 = !DILocation(line: 8, column: 16, scope: !40)
!43 = !DILocation(line: 8, column: 11, scope: !36)
!44 = !DILocation(line: 9, column: 9, scope: !40)
!45 = !DILocation(line: 9, column: 14, scope: !40)
!46 = !DILocation(line: 10, column: 5, scope: !36)
!47 = distinct !{!47, !28, !48, !49}
!48 = !DILocation(line: 10, column: 5, scope: !15)
!49 = !{!"llvm.loop.mustprogress"}
!50 = !DILocation(line: 11, column: 10, scope: !15)
!51 = !DILocation(line: 12, column: 1, scope: !15)
!52 = !DILocation(line: 11, column: 3, scope: !15)
*** IR Dump After CoroEarlyPass on [module] omitted because no change ***
*** IR Dump After LowerExpectIntrinsicPass on foo omitted because no change ***
*** IR Dump After SimplifyCFGPass on foo ***
; ModuleID = 'implicit_preprocessed.ll'
source_filename = "implicit_preprocessed.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@g = dso_local global i32 0, align 4, !dbg !0
@d = dso_local global i32 0, align 4, !dbg !5

; Function Attrs: minsize nounwind optsize sspstrong uwtable
define dso_local i32 @foo() #0 !dbg !15 {
  %1 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr %1) #4, !dbg !21
  call void @llvm.dbg.declare(metadata ptr %1, metadata !19, metadata !DIExpression()), !dbg !22
  %2 = call ptr @malloc(i64 noundef 8) #5, !dbg !23
  store ptr %2, ptr %1, align 8, !dbg !22, !tbaa !24
  br label %3, !dbg !28

3:                                                ; preds = %22, %0
  %4 = load i32, ptr @g, align 4, !dbg !29, !tbaa !30
  %5 = icmp ne i32 %4, 0, !dbg !28
  br i1 %5, label %6, label %23, !dbg !28

6:                                                ; preds = %3
  %7 = load i32, ptr @d, align 4, !dbg !32, !tbaa !30
  %8 = icmp ne i32 %7, 0, !dbg !32
  br i1 %8, label %9, label %22, !dbg !34

9:                                                ; preds = %6
  %10 = load ptr, ptr %1, align 8, !dbg !35, !tbaa !24
  %11 = getelementptr inbounds i32, ptr %10, i64 0, !dbg !35
  %12 = load i32, ptr %11, align 4, !dbg !37, !tbaa !30
  %13 = add nsw i32 %12, 1, !dbg !37
  store i32 %13, ptr %11, align 4, !dbg !37, !tbaa !30
  store i32 0, ptr @d, align 4, !dbg !38, !tbaa !30
  %14 = load ptr, ptr %1, align 8, !dbg !39, !tbaa !24
  %15 = getelementptr inbounds i32, ptr %14, i64 0, !dbg !39
  %16 = load i32, ptr %15, align 4, !dbg !39, !tbaa !30
  %17 = load i32, ptr @g, align 4, !dbg !41, !tbaa !30
  %18 = icmp eq i32 %16, %17, !dbg !42
  br i1 %18, label %19, label %22, !dbg !43

19:                                               ; preds = %9
  %20 = load ptr, ptr %1, align 8, !dbg !44, !tbaa !24
  %21 = getelementptr inbounds i32, ptr %20, i64 0, !dbg !44
  store i32 0, ptr %21, align 4, !dbg !45, !tbaa !30
  br label %22, !dbg !44

22:                                               ; preds = %9, %19, %6
  br label %3, !dbg !28, !llvm.loop !46

23:                                               ; preds = %3
  %24 = load i32, ptr @d, align 4, !dbg !49, !tbaa !30
  call void @llvm.lifetime.end.p0(i64 8, ptr %1) #4, !dbg !50
  ret i32 %24, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #2

; Function Attrs: minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

attributes #0 = { minsize nounwind optsize sspstrong uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind }
attributes #5 = { minsize optsize allocsize(0) }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!8, !9, !10, !11, !12, !13}
!llvm.ident = !{!14}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "g", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 15.0.7", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, globals: !4, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "implicit_preprocessed.c", directory: "/home/michel/ETH/AST/llvm-project/example", checksumkind: CSK_MD5, checksum: "81ce551684fbaa4f3b88065f26c1ce40")
!4 = !{!5, !0}
!5 = !DIGlobalVariableExpression(var: !6, expr: !DIExpression())
!6 = distinct !DIGlobalVariable(name: "d", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !{i32 7, !"Dwarf Version", i32 5}
!9 = !{i32 2, !"Debug Info Version", i32 3}
!10 = !{i32 1, !"wchar_size", i32 4}
!11 = !{i32 8, !"PIC Level", i32 2}
!12 = !{i32 7, !"PIE Level", i32 2}
!13 = !{i32 7, !"uwtable", i32 2}
!14 = !{!"clang version 15.0.7"}
!15 = distinct !DISubprogram(name: "foo", scope: !3, file: !3, line: 2, type: !16, scopeLine: 2, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !18)
!16 = !DISubroutineType(types: !17)
!17 = !{!7}
!18 = !{!19}
!19 = !DILocalVariable(name: "i", scope: !15, file: !3, line: 3, type: !20)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!21 = !DILocation(line: 3, column: 3, scope: !15)
!22 = !DILocation(line: 3, column: 8, scope: !15)
!23 = !DILocation(line: 3, column: 12, scope: !15)
!24 = !{!25, !25, i64 0}
!25 = !{!"any pointer", !26, i64 0}
!26 = !{!"omnipotent char", !27, i64 0}
!27 = !{!"Simple C/C++ TBAA"}
!28 = !DILocation(line: 4, column: 3, scope: !15)
!29 = !DILocation(line: 4, column: 10, scope: !15)
!30 = !{!31, !31, i64 0}
!31 = !{!"int", !26, i64 0}
!32 = !DILocation(line: 5, column: 9, scope: !33)
!33 = distinct !DILexicalBlock(scope: !15, file: !3, line: 5, column: 9)
!34 = !DILocation(line: 5, column: 9, scope: !15)
!35 = !DILocation(line: 6, column: 7, scope: !36)
!36 = distinct !DILexicalBlock(scope: !33, file: !3, line: 5, column: 12)
!37 = !DILocation(line: 6, column: 11, scope: !36)
!38 = !DILocation(line: 7, column: 9, scope: !36)
!39 = !DILocation(line: 8, column: 11, scope: !40)
!40 = distinct !DILexicalBlock(scope: !36, file: !3, line: 8, column: 11)
!41 = !DILocation(line: 8, column: 19, scope: !40)
!42 = !DILocation(line: 8, column: 16, scope: !40)
!43 = !DILocation(line: 8, column: 11, scope: !36)
!44 = !DILocation(line: 9, column: 9, scope: !40)
!45 = !DILocation(line: 9, column: 14, scope: !40)
!46 = distinct !{!46, !28, !47, !48}
!47 = !DILocation(line: 10, column: 5, scope: !15)
!48 = !{!"llvm.loop.mustprogress"}
!49 = !DILocation(line: 11, column: 10, scope: !15)
!50 = !DILocation(line: 12, column: 1, scope: !15)
!51 = !DILocation(line: 11, column: 3, scope: !15)
*** IR Dump After SROAPass on foo ***
; ModuleID = 'implicit_preprocessed.ll'
source_filename = "implicit_preprocessed.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@g = dso_local global i32 0, align 4, !dbg !0
@d = dso_local global i32 0, align 4, !dbg !5

; Function Attrs: minsize nounwind optsize sspstrong uwtable
define dso_local i32 @foo() #0 !dbg !15 {
  %1 = call ptr @malloc(i64 noundef 8) #5, !dbg !21
  call void @llvm.dbg.value(metadata ptr %1, metadata !19, metadata !DIExpression()), !dbg !22
  br label %2, !dbg !23

2:                                                ; preds = %18, %0
  %3 = load i32, ptr @g, align 4, !dbg !24, !tbaa !25
  %4 = icmp ne i32 %3, 0, !dbg !23
  br i1 %4, label %5, label %19, !dbg !23

5:                                                ; preds = %2
  %6 = load i32, ptr @d, align 4, !dbg !29, !tbaa !25
  %7 = icmp ne i32 %6, 0, !dbg !29
  br i1 %7, label %8, label %18, !dbg !31

8:                                                ; preds = %5
  %9 = getelementptr inbounds i32, ptr %1, i64 0, !dbg !32
  %10 = load i32, ptr %9, align 4, !dbg !34, !tbaa !25
  %11 = add nsw i32 %10, 1, !dbg !34
  store i32 %11, ptr %9, align 4, !dbg !34, !tbaa !25
  store i32 0, ptr @d, align 4, !dbg !35, !tbaa !25
  %12 = getelementptr inbounds i32, ptr %1, i64 0, !dbg !36
  %13 = load i32, ptr %12, align 4, !dbg !36, !tbaa !25
  %14 = load i32, ptr @g, align 4, !dbg !38, !tbaa !25
  %15 = icmp eq i32 %13, %14, !dbg !39
  br i1 %15, label %16, label %18, !dbg !40

16:                                               ; preds = %8
  %17 = getelementptr inbounds i32, ptr %1, i64 0, !dbg !41
  store i32 0, ptr %17, align 4, !dbg !42, !tbaa !25
  br label %18, !dbg !41

18:                                               ; preds = %8, %16, %5
  br label %2, !dbg !23, !llvm.loop !43

19:                                               ; preds = %2
  %20 = load i32, ptr @d, align 4, !dbg !46, !tbaa !25
  ret i32 %20, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #2

; Function Attrs: minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #4

attributes #0 = { minsize nounwind optsize sspstrong uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #5 = { minsize optsize allocsize(0) }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!8, !9, !10, !11, !12, !13}
!llvm.ident = !{!14}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "g", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 15.0.7", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, globals: !4, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "implicit_preprocessed.c", directory: "/home/michel/ETH/AST/llvm-project/example", checksumkind: CSK_MD5, checksum: "81ce551684fbaa4f3b88065f26c1ce40")
!4 = !{!5, !0}
!5 = !DIGlobalVariableExpression(var: !6, expr: !DIExpression())
!6 = distinct !DIGlobalVariable(name: "d", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !{i32 7, !"Dwarf Version", i32 5}
!9 = !{i32 2, !"Debug Info Version", i32 3}
!10 = !{i32 1, !"wchar_size", i32 4}
!11 = !{i32 8, !"PIC Level", i32 2}
!12 = !{i32 7, !"PIE Level", i32 2}
!13 = !{i32 7, !"uwtable", i32 2}
!14 = !{!"clang version 15.0.7"}
!15 = distinct !DISubprogram(name: "foo", scope: !3, file: !3, line: 2, type: !16, scopeLine: 2, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !18)
!16 = !DISubroutineType(types: !17)
!17 = !{!7}
!18 = !{!19}
!19 = !DILocalVariable(name: "i", scope: !15, file: !3, line: 3, type: !20)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!21 = !DILocation(line: 3, column: 12, scope: !15)
!22 = !DILocation(line: 0, scope: !15)
!23 = !DILocation(line: 4, column: 3, scope: !15)
!24 = !DILocation(line: 4, column: 10, scope: !15)
!25 = !{!26, !26, i64 0}
!26 = !{!"int", !27, i64 0}
!27 = !{!"omnipotent char", !28, i64 0}
!28 = !{!"Simple C/C++ TBAA"}
!29 = !DILocation(line: 5, column: 9, scope: !30)
!30 = distinct !DILexicalBlock(scope: !15, file: !3, line: 5, column: 9)
!31 = !DILocation(line: 5, column: 9, scope: !15)
!32 = !DILocation(line: 6, column: 7, scope: !33)
!33 = distinct !DILexicalBlock(scope: !30, file: !3, line: 5, column: 12)
!34 = !DILocation(line: 6, column: 11, scope: !33)
!35 = !DILocation(line: 7, column: 9, scope: !33)
!36 = !DILocation(line: 8, column: 11, scope: !37)
!37 = distinct !DILexicalBlock(scope: !33, file: !3, line: 8, column: 11)
!38 = !DILocation(line: 8, column: 19, scope: !37)
!39 = !DILocation(line: 8, column: 16, scope: !37)
!40 = !DILocation(line: 8, column: 11, scope: !33)
!41 = !DILocation(line: 9, column: 9, scope: !37)
!42 = !DILocation(line: 9, column: 14, scope: !37)
!43 = distinct !{!43, !23, !44, !45}
!44 = !DILocation(line: 10, column: 5, scope: !15)
!45 = !{!"llvm.loop.mustprogress"}
!46 = !DILocation(line: 11, column: 10, scope: !15)
!47 = !DILocation(line: 11, column: 3, scope: !15)
*** IR Dump After EarlyCSEPass on foo ***
; ModuleID = 'implicit_preprocessed.ll'
source_filename = "implicit_preprocessed.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@g = dso_local global i32 0, align 4, !dbg !0
@d = dso_local global i32 0, align 4, !dbg !5

; Function Attrs: minsize nounwind optsize sspstrong uwtable
define dso_local i32 @foo() #0 !dbg !15 {
  %1 = call ptr @malloc(i64 noundef 8) #5, !dbg !21
  call void @llvm.dbg.value(metadata ptr %1, metadata !19, metadata !DIExpression()), !dbg !22
  br label %2, !dbg !23

2:                                                ; preds = %15, %0
  %3 = load i32, ptr @g, align 4, !dbg !24, !tbaa !25
  %4 = icmp ne i32 %3, 0, !dbg !23
  br i1 %4, label %5, label %16, !dbg !23

5:                                                ; preds = %2
  %6 = load i32, ptr @d, align 4, !dbg !29, !tbaa !25
  %7 = icmp ne i32 %6, 0, !dbg !29
  br i1 %7, label %8, label %15, !dbg !31

8:                                                ; preds = %5
  %9 = load i32, ptr %1, align 4, !dbg !32, !tbaa !25
  %10 = add nsw i32 %9, 1, !dbg !32
  store i32 %10, ptr %1, align 4, !dbg !32, !tbaa !25
  store i32 0, ptr @d, align 4, !dbg !34, !tbaa !25
  %11 = load i32, ptr %1, align 4, !dbg !35, !tbaa !25
  %12 = load i32, ptr @g, align 4, !dbg !37, !tbaa !25
  %13 = icmp eq i32 %11, %12, !dbg !38
  br i1 %13, label %14, label %15, !dbg !39

14:                                               ; preds = %8
  store i32 0, ptr %1, align 4, !dbg !40, !tbaa !25
  br label %15, !dbg !41

15:                                               ; preds = %8, %14, %5
  br label %2, !dbg !23, !llvm.loop !42

16:                                               ; preds = %2
  %17 = load i32, ptr @d, align 4, !dbg !45, !tbaa !25
  ret i32 %17, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #2

; Function Attrs: minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #4

attributes #0 = { minsize nounwind optsize sspstrong uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #5 = { minsize optsize allocsize(0) }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!8, !9, !10, !11, !12, !13}
!llvm.ident = !{!14}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "g", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 15.0.7", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, globals: !4, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "implicit_preprocessed.c", directory: "/home/michel/ETH/AST/llvm-project/example", checksumkind: CSK_MD5, checksum: "81ce551684fbaa4f3b88065f26c1ce40")
!4 = !{!5, !0}
!5 = !DIGlobalVariableExpression(var: !6, expr: !DIExpression())
!6 = distinct !DIGlobalVariable(name: "d", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !{i32 7, !"Dwarf Version", i32 5}
!9 = !{i32 2, !"Debug Info Version", i32 3}
!10 = !{i32 1, !"wchar_size", i32 4}
!11 = !{i32 8, !"PIC Level", i32 2}
!12 = !{i32 7, !"PIE Level", i32 2}
!13 = !{i32 7, !"uwtable", i32 2}
!14 = !{!"clang version 15.0.7"}
!15 = distinct !DISubprogram(name: "foo", scope: !3, file: !3, line: 2, type: !16, scopeLine: 2, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !18)
!16 = !DISubroutineType(types: !17)
!17 = !{!7}
!18 = !{!19}
!19 = !DILocalVariable(name: "i", scope: !15, file: !3, line: 3, type: !20)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!21 = !DILocation(line: 3, column: 12, scope: !15)
!22 = !DILocation(line: 0, scope: !15)
!23 = !DILocation(line: 4, column: 3, scope: !15)
!24 = !DILocation(line: 4, column: 10, scope: !15)
!25 = !{!26, !26, i64 0}
!26 = !{!"int", !27, i64 0}
!27 = !{!"omnipotent char", !28, i64 0}
!28 = !{!"Simple C/C++ TBAA"}
!29 = !DILocation(line: 5, column: 9, scope: !30)
!30 = distinct !DILexicalBlock(scope: !15, file: !3, line: 5, column: 9)
!31 = !DILocation(line: 5, column: 9, scope: !15)
!32 = !DILocation(line: 6, column: 11, scope: !33)
!33 = distinct !DILexicalBlock(scope: !30, file: !3, line: 5, column: 12)
!34 = !DILocation(line: 7, column: 9, scope: !33)
!35 = !DILocation(line: 8, column: 11, scope: !36)
!36 = distinct !DILexicalBlock(scope: !33, file: !3, line: 8, column: 11)
!37 = !DILocation(line: 8, column: 19, scope: !36)
!38 = !DILocation(line: 8, column: 16, scope: !36)
!39 = !DILocation(line: 8, column: 11, scope: !33)
!40 = !DILocation(line: 9, column: 14, scope: !36)
!41 = !DILocation(line: 9, column: 9, scope: !36)
!42 = distinct !{!42, !23, !43, !44}
!43 = !DILocation(line: 10, column: 5, scope: !15)
!44 = !{!"llvm.loop.mustprogress"}
!45 = !DILocation(line: 11, column: 10, scope: !15)
!46 = !DILocation(line: 11, column: 3, scope: !15)
*** IR Pass PassManager<Function> on foo ignored ***
*** IR Pass ModuleToFunctionPassAdaptor on [module] ignored ***
*** IR Dump After OpenMPOptPass on [module] omitted because no change ***
*** IR Dump After IPSCCPPass on [module] omitted because no change ***
*** IR Dump After CalledValuePropagationPass on [module] omitted because no change ***
*** IR Dump After GlobalOptPass on [module] ***
; ModuleID = 'implicit_preprocessed.ll'
source_filename = "implicit_preprocessed.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@g = dso_local local_unnamed_addr global i32 0, align 4, !dbg !0
@d = dso_local local_unnamed_addr global i32 0, align 4, !dbg !5

; Function Attrs: minsize nounwind optsize sspstrong uwtable
define dso_local i32 @foo() local_unnamed_addr #0 !dbg !15 {
  %1 = call ptr @malloc(i64 noundef 8) #3, !dbg !21
  call void @llvm.dbg.value(metadata ptr %1, metadata !19, metadata !DIExpression()), !dbg !22
  br label %2, !dbg !23

2:                                                ; preds = %15, %0
  %3 = load i32, ptr @g, align 4, !dbg !24, !tbaa !25
  %4 = icmp ne i32 %3, 0, !dbg !23
  br i1 %4, label %5, label %16, !dbg !23

5:                                                ; preds = %2
  %6 = load i32, ptr @d, align 4, !dbg !29, !tbaa !25
  %7 = icmp ne i32 %6, 0, !dbg !29
  br i1 %7, label %8, label %15, !dbg !31

8:                                                ; preds = %5
  %9 = load i32, ptr %1, align 4, !dbg !32, !tbaa !25
  %10 = add nsw i32 %9, 1, !dbg !32
  store i32 %10, ptr %1, align 4, !dbg !32, !tbaa !25
  store i32 0, ptr @d, align 4, !dbg !34, !tbaa !25
  %11 = load i32, ptr %1, align 4, !dbg !35, !tbaa !25
  %12 = load i32, ptr @g, align 4, !dbg !37, !tbaa !25
  %13 = icmp eq i32 %11, %12, !dbg !38
  br i1 %13, label %14, label %15, !dbg !39

14:                                               ; preds = %8
  store i32 0, ptr %1, align 4, !dbg !40, !tbaa !25
  br label %15, !dbg !41

15:                                               ; preds = %8, %14, %5
  br label %2, !dbg !23, !llvm.loop !42

16:                                               ; preds = %2
  %17 = load i32, ptr @d, align 4, !dbg !45, !tbaa !25
  ret i32 %17, !dbg !46
}

; Function Attrs: minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #2

attributes #0 = { minsize nounwind optsize sspstrong uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { minsize optsize allocsize(0) }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!8, !9, !10, !11, !12, !13}
!llvm.ident = !{!14}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "g", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 15.0.7", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, globals: !4, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "implicit_preprocessed.c", directory: "/home/michel/ETH/AST/llvm-project/example", checksumkind: CSK_MD5, checksum: "81ce551684fbaa4f3b88065f26c1ce40")
!4 = !{!5, !0}
!5 = !DIGlobalVariableExpression(var: !6, expr: !DIExpression())
!6 = distinct !DIGlobalVariable(name: "d", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !{i32 7, !"Dwarf Version", i32 5}
!9 = !{i32 2, !"Debug Info Version", i32 3}
!10 = !{i32 1, !"wchar_size", i32 4}
!11 = !{i32 8, !"PIC Level", i32 2}
!12 = !{i32 7, !"PIE Level", i32 2}
!13 = !{i32 7, !"uwtable", i32 2}
!14 = !{!"clang version 15.0.7"}
!15 = distinct !DISubprogram(name: "foo", scope: !3, file: !3, line: 2, type: !16, scopeLine: 2, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !18)
!16 = !DISubroutineType(types: !17)
!17 = !{!7}
!18 = !{!19}
!19 = !DILocalVariable(name: "i", scope: !15, file: !3, line: 3, type: !20)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!21 = !DILocation(line: 3, column: 12, scope: !15)
!22 = !DILocation(line: 0, scope: !15)
!23 = !DILocation(line: 4, column: 3, scope: !15)
!24 = !DILocation(line: 4, column: 10, scope: !15)
!25 = !{!26, !26, i64 0}
!26 = !{!"int", !27, i64 0}
!27 = !{!"omnipotent char", !28, i64 0}
!28 = !{!"Simple C/C++ TBAA"}
!29 = !DILocation(line: 5, column: 9, scope: !30)
!30 = distinct !DILexicalBlock(scope: !15, file: !3, line: 5, column: 9)
!31 = !DILocation(line: 5, column: 9, scope: !15)
!32 = !DILocation(line: 6, column: 11, scope: !33)
!33 = distinct !DILexicalBlock(scope: !30, file: !3, line: 5, column: 12)
!34 = !DILocation(line: 7, column: 9, scope: !33)
!35 = !DILocation(line: 8, column: 11, scope: !36)
!36 = distinct !DILexicalBlock(scope: !33, file: !3, line: 8, column: 11)
!37 = !DILocation(line: 8, column: 19, scope: !36)
!38 = !DILocation(line: 8, column: 16, scope: !36)
!39 = !DILocation(line: 8, column: 11, scope: !33)
!40 = !DILocation(line: 9, column: 14, scope: !36)
!41 = !DILocation(line: 9, column: 9, scope: !36)
!42 = distinct !{!42, !23, !43, !44}
!43 = !DILocation(line: 10, column: 5, scope: !15)
!44 = !{!"llvm.loop.mustprogress"}
!45 = !DILocation(line: 11, column: 10, scope: !15)
!46 = !DILocation(line: 11, column: 3, scope: !15)
*** IR Dump After PromotePass on foo omitted because no change ***
*** IR Dump After InstCombinePass on foo ***
; ModuleID = 'implicit_preprocessed.ll'
source_filename = "implicit_preprocessed.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@g = dso_local local_unnamed_addr global i32 0, align 4, !dbg !0
@d = dso_local local_unnamed_addr global i32 0, align 4, !dbg !5

; Function Attrs: minsize nounwind optsize sspstrong uwtable
define dso_local i32 @foo() local_unnamed_addr #0 !dbg !15 {
  %1 = call dereferenceable_or_null(8) ptr @malloc(i64 noundef 8) #3, !dbg !21
  call void @llvm.dbg.value(metadata ptr %1, metadata !19, metadata !DIExpression()), !dbg !22
  br label %2, !dbg !23

2:                                                ; preds = %12, %0
  %3 = load i32, ptr @g, align 4, !dbg !24, !tbaa !25
  %.not = icmp eq i32 %3, 0, !dbg !23
  br i1 %.not, label %13, label %4, !dbg !23

4:                                                ; preds = %2
  %5 = load i32, ptr @d, align 4, !dbg !29, !tbaa !25
  %.not3 = icmp eq i32 %5, 0, !dbg !29
  br i1 %.not3, label %12, label %6, !dbg !31

6:                                                ; preds = %4
  %7 = load i32, ptr %1, align 4, !dbg !32, !tbaa !25
  %8 = add nsw i32 %7, 1, !dbg !32
  store i32 %8, ptr %1, align 4, !dbg !32, !tbaa !25
  store i32 0, ptr @d, align 4, !dbg !34, !tbaa !25
  %9 = load i32, ptr @g, align 4, !dbg !35, !tbaa !25
  %10 = icmp eq i32 %8, %9, !dbg !37
  br i1 %10, label %11, label %12, !dbg !38

11:                                               ; preds = %6
  store i32 0, ptr %1, align 4, !dbg !39, !tbaa !25
  br label %12, !dbg !40

12:                                               ; preds = %6, %11, %4
  br label %2, !dbg !23, !llvm.loop !41

13:                                               ; preds = %2
  %14 = load i32, ptr @d, align 4, !dbg !44, !tbaa !25
  ret i32 %14, !dbg !45
}

; Function Attrs: minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #2

attributes #0 = { minsize nounwind optsize sspstrong uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { minsize optsize allocsize(0) }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!8, !9, !10, !11, !12, !13}
!llvm.ident = !{!14}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "g", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 15.0.7", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, globals: !4, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "implicit_preprocessed.c", directory: "/home/michel/ETH/AST/llvm-project/example", checksumkind: CSK_MD5, checksum: "81ce551684fbaa4f3b88065f26c1ce40")
!4 = !{!5, !0}
!5 = !DIGlobalVariableExpression(var: !6, expr: !DIExpression())
!6 = distinct !DIGlobalVariable(name: "d", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !{i32 7, !"Dwarf Version", i32 5}
!9 = !{i32 2, !"Debug Info Version", i32 3}
!10 = !{i32 1, !"wchar_size", i32 4}
!11 = !{i32 8, !"PIC Level", i32 2}
!12 = !{i32 7, !"PIE Level", i32 2}
!13 = !{i32 7, !"uwtable", i32 2}
!14 = !{!"clang version 15.0.7"}
!15 = distinct !DISubprogram(name: "foo", scope: !3, file: !3, line: 2, type: !16, scopeLine: 2, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !18)
!16 = !DISubroutineType(types: !17)
!17 = !{!7}
!18 = !{!19}
!19 = !DILocalVariable(name: "i", scope: !15, file: !3, line: 3, type: !20)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!21 = !DILocation(line: 3, column: 12, scope: !15)
!22 = !DILocation(line: 0, scope: !15)
!23 = !DILocation(line: 4, column: 3, scope: !15)
!24 = !DILocation(line: 4, column: 10, scope: !15)
!25 = !{!26, !26, i64 0}
!26 = !{!"int", !27, i64 0}
!27 = !{!"omnipotent char", !28, i64 0}
!28 = !{!"Simple C/C++ TBAA"}
!29 = !DILocation(line: 5, column: 9, scope: !30)
!30 = distinct !DILexicalBlock(scope: !15, file: !3, line: 5, column: 9)
!31 = !DILocation(line: 5, column: 9, scope: !15)
!32 = !DILocation(line: 6, column: 11, scope: !33)
!33 = distinct !DILexicalBlock(scope: !30, file: !3, line: 5, column: 12)
!34 = !DILocation(line: 7, column: 9, scope: !33)
!35 = !DILocation(line: 8, column: 19, scope: !36)
!36 = distinct !DILexicalBlock(scope: !33, file: !3, line: 8, column: 11)
!37 = !DILocation(line: 8, column: 16, scope: !36)
!38 = !DILocation(line: 8, column: 11, scope: !33)
!39 = !DILocation(line: 9, column: 14, scope: !36)
!40 = !DILocation(line: 9, column: 9, scope: !36)
!41 = distinct !{!41, !23, !42, !43}
!42 = !DILocation(line: 10, column: 5, scope: !15)
!43 = !{!"llvm.loop.mustprogress"}
!44 = !DILocation(line: 11, column: 10, scope: !15)
!45 = !DILocation(line: 11, column: 3, scope: !15)
*** IR Dump After SimplifyCFGPass on foo omitted because no change ***
*** IR Pass PassManager<Function> on foo ignored ***
*** IR Pass ModuleToFunctionPassAdaptor on [module] ignored ***
*** IR Dump After RequireAnalysisPass<GlobalsAA, Module> on [module] omitted because no change ***
*** IR Dump After InvalidateAnalysisPass<AAManager> on foo omitted because no change ***
*** IR Pass ModuleToFunctionPassAdaptor on [module] ignored ***
*** IR Dump After RequireAnalysisPass<ProfileSummaryAnalysis, Module> on [module] omitted because no change ***
*** IR Dump After InlinerPass on (foo) omitted because no change ***
*** IR Dump After InlinerPass on (foo) omitted because no change ***
*** IR Dump After PostOrderFunctionAttrsPass on (foo) ***
; ModuleID = 'implicit_preprocessed.ll'
source_filename = "implicit_preprocessed.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@g = dso_local local_unnamed_addr global i32 0, align 4, !dbg !0
@d = dso_local local_unnamed_addr global i32 0, align 4, !dbg !5

; Function Attrs: minsize nofree nounwind optsize sspstrong memory(readwrite, argmem: none) uwtable
define dso_local i32 @foo() local_unnamed_addr #0 !dbg !15 {
  %1 = call dereferenceable_or_null(8) ptr @malloc(i64 noundef 8) #3, !dbg !21
  call void @llvm.dbg.value(metadata ptr %1, metadata !19, metadata !DIExpression()), !dbg !22
  br label %2, !dbg !23

2:                                                ; preds = %12, %0
  %3 = load i32, ptr @g, align 4, !dbg !24, !tbaa !25
  %.not = icmp eq i32 %3, 0, !dbg !23
  br i1 %.not, label %13, label %4, !dbg !23

4:                                                ; preds = %2
  %5 = load i32, ptr @d, align 4, !dbg !29, !tbaa !25
  %.not3 = icmp eq i32 %5, 0, !dbg !29
  br i1 %.not3, label %12, label %6, !dbg !31

6:                                                ; preds = %4
  %7 = load i32, ptr %1, align 4, !dbg !32, !tbaa !25
  %8 = add nsw i32 %7, 1, !dbg !32
  store i32 %8, ptr %1, align 4, !dbg !32, !tbaa !25
  store i32 0, ptr @d, align 4, !dbg !34, !tbaa !25
  %9 = load i32, ptr @g, align 4, !dbg !35, !tbaa !25
  %10 = icmp eq i32 %8, %9, !dbg !37
  br i1 %10, label %11, label %12, !dbg !38

11:                                               ; preds = %6
  store i32 0, ptr %1, align 4, !dbg !39, !tbaa !25
  br label %12, !dbg !40

12:                                               ; preds = %6, %11, %4
  br label %2, !dbg !23, !llvm.loop !41

13:                                               ; preds = %2
  %14 = load i32, ptr @d, align 4, !dbg !44, !tbaa !25
  ret i32 %14, !dbg !45
}

; Function Attrs: minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #2

attributes #0 = { minsize nofree nounwind optsize sspstrong memory(readwrite, argmem: none) uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { minsize optsize allocsize(0) }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!8, !9, !10, !11, !12, !13}
!llvm.ident = !{!14}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "g", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 15.0.7", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, globals: !4, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "implicit_preprocessed.c", directory: "/home/michel/ETH/AST/llvm-project/example", checksumkind: CSK_MD5, checksum: "81ce551684fbaa4f3b88065f26c1ce40")
!4 = !{!5, !0}
!5 = !DIGlobalVariableExpression(var: !6, expr: !DIExpression())
!6 = distinct !DIGlobalVariable(name: "d", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !{i32 7, !"Dwarf Version", i32 5}
!9 = !{i32 2, !"Debug Info Version", i32 3}
!10 = !{i32 1, !"wchar_size", i32 4}
!11 = !{i32 8, !"PIC Level", i32 2}
!12 = !{i32 7, !"PIE Level", i32 2}
!13 = !{i32 7, !"uwtable", i32 2}
!14 = !{!"clang version 15.0.7"}
!15 = distinct !DISubprogram(name: "foo", scope: !3, file: !3, line: 2, type: !16, scopeLine: 2, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !18)
!16 = !DISubroutineType(types: !17)
!17 = !{!7}
!18 = !{!19}
!19 = !DILocalVariable(name: "i", scope: !15, file: !3, line: 3, type: !20)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!21 = !DILocation(line: 3, column: 12, scope: !15)
!22 = !DILocation(line: 0, scope: !15)
!23 = !DILocation(line: 4, column: 3, scope: !15)
!24 = !DILocation(line: 4, column: 10, scope: !15)
!25 = !{!26, !26, i64 0}
!26 = !{!"int", !27, i64 0}
!27 = !{!"omnipotent char", !28, i64 0}
!28 = !{!"Simple C/C++ TBAA"}
!29 = !DILocation(line: 5, column: 9, scope: !30)
!30 = distinct !DILexicalBlock(scope: !15, file: !3, line: 5, column: 9)
!31 = !DILocation(line: 5, column: 9, scope: !15)
!32 = !DILocation(line: 6, column: 11, scope: !33)
!33 = distinct !DILexicalBlock(scope: !30, file: !3, line: 5, column: 12)
!34 = !DILocation(line: 7, column: 9, scope: !33)
!35 = !DILocation(line: 8, column: 19, scope: !36)
!36 = distinct !DILexicalBlock(scope: !33, file: !3, line: 8, column: 11)
!37 = !DILocation(line: 8, column: 16, scope: !36)
!38 = !DILocation(line: 8, column: 11, scope: !33)
!39 = !DILocation(line: 9, column: 14, scope: !36)
!40 = !DILocation(line: 9, column: 9, scope: !36)
!41 = distinct !{!41, !23, !42, !43}
!42 = !DILocation(line: 10, column: 5, scope: !15)
!43 = !{!"llvm.loop.mustprogress"}
!44 = !DILocation(line: 11, column: 10, scope: !15)
!45 = !DILocation(line: 11, column: 3, scope: !15)
*** IR Dump After SROAPass on foo omitted because no change ***
*** IR Dump After EarlyCSEPass on foo ***
; ModuleID = 'implicit_preprocessed.ll'
source_filename = "implicit_preprocessed.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@g = dso_local local_unnamed_addr global i32 0, align 4, !dbg !0
@d = dso_local local_unnamed_addr global i32 0, align 4, !dbg !5

; Function Attrs: minsize nofree nounwind optsize sspstrong memory(readwrite, argmem: none) uwtable
define dso_local i32 @foo() local_unnamed_addr #0 !dbg !15 {
  %1 = call dereferenceable_or_null(8) ptr @malloc(i64 noundef 8) #3, !dbg !21
  call void @llvm.dbg.value(metadata ptr %1, metadata !19, metadata !DIExpression()), !dbg !22
  br label %2, !dbg !23

2:                                                ; preds = %11, %0
  %3 = load i32, ptr @g, align 4, !dbg !24, !tbaa !25
  %.not = icmp eq i32 %3, 0, !dbg !23
  br i1 %.not, label %12, label %4, !dbg !23

4:                                                ; preds = %2
  %5 = load i32, ptr @d, align 4, !dbg !29, !tbaa !25
  %.not3 = icmp eq i32 %5, 0, !dbg !29
  br i1 %.not3, label %11, label %6, !dbg !31

6:                                                ; preds = %4
  %7 = load i32, ptr %1, align 4, !dbg !32, !tbaa !25
  %8 = add nsw i32 %7, 1, !dbg !32
  store i32 %8, ptr %1, align 4, !dbg !32, !tbaa !25
  store i32 0, ptr @d, align 4, !dbg !34, !tbaa !25
  %9 = icmp eq i32 %8, %3, !dbg !35
  br i1 %9, label %10, label %11, !dbg !37

10:                                               ; preds = %6
  store i32 0, ptr %1, align 4, !dbg !38, !tbaa !25
  br label %11, !dbg !39

11:                                               ; preds = %6, %10, %4
  br label %2, !dbg !23, !llvm.loop !40

12:                                               ; preds = %2
  %13 = load i32, ptr @d, align 4, !dbg !43, !tbaa !25
  ret i32 %13, !dbg !44
}

; Function Attrs: minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #2

attributes #0 = { minsize nofree nounwind optsize sspstrong memory(readwrite, argmem: none) uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { minsize optsize allocsize(0) }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!8, !9, !10, !11, !12, !13}
!llvm.ident = !{!14}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "g", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 15.0.7", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, globals: !4, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "implicit_preprocessed.c", directory: "/home/michel/ETH/AST/llvm-project/example", checksumkind: CSK_MD5, checksum: "81ce551684fbaa4f3b88065f26c1ce40")
!4 = !{!5, !0}
!5 = !DIGlobalVariableExpression(var: !6, expr: !DIExpression())
!6 = distinct !DIGlobalVariable(name: "d", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !{i32 7, !"Dwarf Version", i32 5}
!9 = !{i32 2, !"Debug Info Version", i32 3}
!10 = !{i32 1, !"wchar_size", i32 4}
!11 = !{i32 8, !"PIC Level", i32 2}
!12 = !{i32 7, !"PIE Level", i32 2}
!13 = !{i32 7, !"uwtable", i32 2}
!14 = !{!"clang version 15.0.7"}
!15 = distinct !DISubprogram(name: "foo", scope: !3, file: !3, line: 2, type: !16, scopeLine: 2, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !18)
!16 = !DISubroutineType(types: !17)
!17 = !{!7}
!18 = !{!19}
!19 = !DILocalVariable(name: "i", scope: !15, file: !3, line: 3, type: !20)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!21 = !DILocation(line: 3, column: 12, scope: !15)
!22 = !DILocation(line: 0, scope: !15)
!23 = !DILocation(line: 4, column: 3, scope: !15)
!24 = !DILocation(line: 4, column: 10, scope: !15)
!25 = !{!26, !26, i64 0}
!26 = !{!"int", !27, i64 0}
!27 = !{!"omnipotent char", !28, i64 0}
!28 = !{!"Simple C/C++ TBAA"}
!29 = !DILocation(line: 5, column: 9, scope: !30)
!30 = distinct !DILexicalBlock(scope: !15, file: !3, line: 5, column: 9)
!31 = !DILocation(line: 5, column: 9, scope: !15)
!32 = !DILocation(line: 6, column: 11, scope: !33)
!33 = distinct !DILexicalBlock(scope: !30, file: !3, line: 5, column: 12)
!34 = !DILocation(line: 7, column: 9, scope: !33)
!35 = !DILocation(line: 8, column: 16, scope: !36)
!36 = distinct !DILexicalBlock(scope: !33, file: !3, line: 8, column: 11)
!37 = !DILocation(line: 8, column: 11, scope: !33)
!38 = !DILocation(line: 9, column: 14, scope: !36)
!39 = !DILocation(line: 9, column: 9, scope: !36)
!40 = distinct !{!40, !23, !41, !42}
!41 = !DILocation(line: 10, column: 5, scope: !15)
!42 = !{!"llvm.loop.mustprogress"}
!43 = !DILocation(line: 11, column: 10, scope: !15)
!44 = !DILocation(line: 11, column: 3, scope: !15)
*** IR Dump After SpeculativeExecutionPass on foo omitted because no change ***
*** IR Dump After JumpThreadingPass on foo omitted because no change ***
*** IR Dump After CorrelatedValuePropagationPass on foo omitted because no change ***
*** IR Dump After SimplifyCFGPass on foo omitted because no change ***
*** IR Dump After InstCombinePass on foo omitted because no change ***
*** IR Dump After ConstraintEliminationPass on foo omitted because no change ***
*** IR Dump After TailCallElimPass on foo ***
; ModuleID = 'implicit_preprocessed.ll'
source_filename = "implicit_preprocessed.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@g = dso_local local_unnamed_addr global i32 0, align 4, !dbg !0
@d = dso_local local_unnamed_addr global i32 0, align 4, !dbg !5

; Function Attrs: minsize nofree nounwind optsize sspstrong memory(readwrite, argmem: none) uwtable
define dso_local i32 @foo() local_unnamed_addr #0 !dbg !15 {
  %1 = tail call dereferenceable_or_null(8) ptr @malloc(i64 noundef 8) #3, !dbg !21
  call void @llvm.dbg.value(metadata ptr %1, metadata !19, metadata !DIExpression()), !dbg !22
  br label %2, !dbg !23

2:                                                ; preds = %11, %0
  %3 = load i32, ptr @g, align 4, !dbg !24, !tbaa !25
  %.not = icmp eq i32 %3, 0, !dbg !23
  br i1 %.not, label %12, label %4, !dbg !23

4:                                                ; preds = %2
  %5 = load i32, ptr @d, align 4, !dbg !29, !tbaa !25
  %.not3 = icmp eq i32 %5, 0, !dbg !29
  br i1 %.not3, label %11, label %6, !dbg !31

6:                                                ; preds = %4
  %7 = load i32, ptr %1, align 4, !dbg !32, !tbaa !25
  %8 = add nsw i32 %7, 1, !dbg !32
  store i32 %8, ptr %1, align 4, !dbg !32, !tbaa !25
  store i32 0, ptr @d, align 4, !dbg !34, !tbaa !25
  %9 = icmp eq i32 %8, %3, !dbg !35
  br i1 %9, label %10, label %11, !dbg !37

10:                                               ; preds = %6
  store i32 0, ptr %1, align 4, !dbg !38, !tbaa !25
  br label %11, !dbg !39

11:                                               ; preds = %6, %10, %4
  br label %2, !dbg !23, !llvm.loop !40

12:                                               ; preds = %2
  %13 = load i32, ptr @d, align 4, !dbg !43, !tbaa !25
  ret i32 %13, !dbg !44
}

; Function Attrs: minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #2

attributes #0 = { minsize nofree nounwind optsize sspstrong memory(readwrite, argmem: none) uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { minsize optsize allocsize(0) }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!8, !9, !10, !11, !12, !13}
!llvm.ident = !{!14}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "g", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 15.0.7", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, globals: !4, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "implicit_preprocessed.c", directory: "/home/michel/ETH/AST/llvm-project/example", checksumkind: CSK_MD5, checksum: "81ce551684fbaa4f3b88065f26c1ce40")
!4 = !{!5, !0}
!5 = !DIGlobalVariableExpression(var: !6, expr: !DIExpression())
!6 = distinct !DIGlobalVariable(name: "d", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !{i32 7, !"Dwarf Version", i32 5}
!9 = !{i32 2, !"Debug Info Version", i32 3}
!10 = !{i32 1, !"wchar_size", i32 4}
!11 = !{i32 8, !"PIC Level", i32 2}
!12 = !{i32 7, !"PIE Level", i32 2}
!13 = !{i32 7, !"uwtable", i32 2}
!14 = !{!"clang version 15.0.7"}
!15 = distinct !DISubprogram(name: "foo", scope: !3, file: !3, line: 2, type: !16, scopeLine: 2, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !18)
!16 = !DISubroutineType(types: !17)
!17 = !{!7}
!18 = !{!19}
!19 = !DILocalVariable(name: "i", scope: !15, file: !3, line: 3, type: !20)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!21 = !DILocation(line: 3, column: 12, scope: !15)
!22 = !DILocation(line: 0, scope: !15)
!23 = !DILocation(line: 4, column: 3, scope: !15)
!24 = !DILocation(line: 4, column: 10, scope: !15)
!25 = !{!26, !26, i64 0}
!26 = !{!"int", !27, i64 0}
!27 = !{!"omnipotent char", !28, i64 0}
!28 = !{!"Simple C/C++ TBAA"}
!29 = !DILocation(line: 5, column: 9, scope: !30)
!30 = distinct !DILexicalBlock(scope: !15, file: !3, line: 5, column: 9)
!31 = !DILocation(line: 5, column: 9, scope: !15)
!32 = !DILocation(line: 6, column: 11, scope: !33)
!33 = distinct !DILexicalBlock(scope: !30, file: !3, line: 5, column: 12)
!34 = !DILocation(line: 7, column: 9, scope: !33)
!35 = !DILocation(line: 8, column: 16, scope: !36)
!36 = distinct !DILexicalBlock(scope: !33, file: !3, line: 8, column: 11)
!37 = !DILocation(line: 8, column: 11, scope: !33)
!38 = !DILocation(line: 9, column: 14, scope: !36)
!39 = !DILocation(line: 9, column: 9, scope: !36)
!40 = distinct !{!40, !23, !41, !42}
!41 = !DILocation(line: 10, column: 5, scope: !15)
!42 = !{!"llvm.loop.mustprogress"}
!43 = !DILocation(line: 11, column: 10, scope: !15)
!44 = !DILocation(line: 11, column: 3, scope: !15)
*** IR Dump After SimplifyCFGPass on foo omitted because no change ***
*** IR Dump After ReassociatePass on foo omitted because no change ***
*** IR Dump After RequireAnalysisPass<OptimizationRemarkEmitterAnalysis, Function> on foo omitted because no change ***
*** IR Dump After LoopSimplifyPass on foo omitted because no change ***
*** IR Dump After LCSSAPass on foo omitted because no change ***
*** IR Pass PassManager<Function> on foo ignored ***
*** IR Dump After LoopInstSimplifyPass on <unnamed loop> omitted because no change ***
*** IR Dump After LoopSimplifyCFGPass on <unnamed loop> omitted because no change ***
*** IR Dump After LICMPass on <unnamed loop> ***
; ModuleID = 'implicit_preprocessed.ll'
source_filename = "implicit_preprocessed.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@g = dso_local local_unnamed_addr global i32 0, align 4, !dbg !0
@d = dso_local local_unnamed_addr global i32 0, align 4, !dbg !5

; Function Attrs: minsize nofree nounwind optsize sspstrong memory(readwrite, argmem: none) uwtable
define dso_local i32 @foo() local_unnamed_addr #0 !dbg !15 {
  %1 = tail call dereferenceable_or_null(8) ptr @malloc(i64 noundef 8) #3, !dbg !21
  call void @llvm.dbg.value(metadata ptr %1, metadata !19, metadata !DIExpression()), !dbg !22
  %2 = load i32, ptr @g, align 4, !tbaa !23
  %.not = icmp eq i32 %2, 0
  %d.promoted = load i32, ptr @d, align 1, !tbaa !23
  br label %3, !dbg !27

3:                                                ; preds = %11, %0
  %4 = phi i32 [ %12, %11 ], [ %d.promoted, %0 ]
  br i1 %.not, label %13, label %5, !dbg !27

5:                                                ; preds = %3
  %.not3 = icmp eq i32 %4, 0, !dbg !28
  br i1 %.not3, label %11, label %6, !dbg !30

6:                                                ; preds = %5
  %7 = load i32, ptr %1, align 4, !dbg !31, !tbaa !23
  %8 = add nsw i32 %7, 1, !dbg !31
  store i32 %8, ptr %1, align 4, !dbg !31, !tbaa !23
  store i32 0, ptr @d, align 4, !dbg !33, !tbaa !23
  %9 = icmp eq i32 %8, %2, !dbg !34
  br i1 %9, label %10, label %11, !dbg !36

10:                                               ; preds = %6
  store i32 0, ptr %1, align 4, !dbg !37, !tbaa !23
  br label %11, !dbg !38

11:                                               ; preds = %6, %10, %5
  %12 = phi i32 [ 0, %6 ], [ 0, %10 ], [ %4, %5 ]
  br label %3, !dbg !27, !llvm.loop !39

13:                                               ; preds = %3
  %14 = load i32, ptr @d, align 4, !dbg !42, !tbaa !23
  ret i32 %14, !dbg !43
}

; Function Attrs: minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #2

attributes #0 = { minsize nofree nounwind optsize sspstrong memory(readwrite, argmem: none) uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { minsize optsize allocsize(0) }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!8, !9, !10, !11, !12, !13}
!llvm.ident = !{!14}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "g", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 15.0.7", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, globals: !4, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "implicit_preprocessed.c", directory: "/home/michel/ETH/AST/llvm-project/example", checksumkind: CSK_MD5, checksum: "81ce551684fbaa4f3b88065f26c1ce40")
!4 = !{!5, !0}
!5 = !DIGlobalVariableExpression(var: !6, expr: !DIExpression())
!6 = distinct !DIGlobalVariable(name: "d", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !{i32 7, !"Dwarf Version", i32 5}
!9 = !{i32 2, !"Debug Info Version", i32 3}
!10 = !{i32 1, !"wchar_size", i32 4}
!11 = !{i32 8, !"PIC Level", i32 2}
!12 = !{i32 7, !"PIE Level", i32 2}
!13 = !{i32 7, !"uwtable", i32 2}
!14 = !{!"clang version 15.0.7"}
!15 = distinct !DISubprogram(name: "foo", scope: !3, file: !3, line: 2, type: !16, scopeLine: 2, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !18)
!16 = !DISubroutineType(types: !17)
!17 = !{!7}
!18 = !{!19}
!19 = !DILocalVariable(name: "i", scope: !15, file: !3, line: 3, type: !20)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!21 = !DILocation(line: 3, column: 12, scope: !15)
!22 = !DILocation(line: 0, scope: !15)
!23 = !{!24, !24, i64 0}
!24 = !{!"int", !25, i64 0}
!25 = !{!"omnipotent char", !26, i64 0}
!26 = !{!"Simple C/C++ TBAA"}
!27 = !DILocation(line: 4, column: 3, scope: !15)
!28 = !DILocation(line: 5, column: 9, scope: !29)
!29 = distinct !DILexicalBlock(scope: !15, file: !3, line: 5, column: 9)
!30 = !DILocation(line: 5, column: 9, scope: !15)
!31 = !DILocation(line: 6, column: 11, scope: !32)
!32 = distinct !DILexicalBlock(scope: !29, file: !3, line: 5, column: 12)
!33 = !DILocation(line: 7, column: 9, scope: !32)
!34 = !DILocation(line: 8, column: 16, scope: !35)
!35 = distinct !DILexicalBlock(scope: !32, file: !3, line: 8, column: 11)
!36 = !DILocation(line: 8, column: 11, scope: !32)
!37 = !DILocation(line: 9, column: 14, scope: !35)
!38 = !DILocation(line: 9, column: 9, scope: !35)
!39 = distinct !{!39, !27, !40, !41}
!40 = !DILocation(line: 10, column: 5, scope: !15)
!41 = !{!"llvm.loop.mustprogress"}
!42 = !DILocation(line: 11, column: 10, scope: !15)
!43 = !DILocation(line: 11, column: 3, scope: !15)
*** IR Dump After LoopRotatePass on <unnamed loop> omitted because no change ***
*** IR Dump After LICMPass on <unnamed loop> omitted because no change ***
*** IR Pass SimpleLoopUnswitchPass invalidated ***
*** IR Pass PassManager<Loop, AnalysisManager<Loop, LoopStandardAnalysisResults&>, LoopStandardAnalysisResults&, LPMUpdater&> invalidated ***
*** IR Dump After LoopInstSimplifyPass on <unnamed loop> omitted because no change ***
*** IR Dump After LoopSimplifyCFGPass on <unnamed loop> ***
; ModuleID = 'implicit_preprocessed.ll'
source_filename = "implicit_preprocessed.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@g = dso_local local_unnamed_addr global i32 0, align 4, !dbg !0
@d = dso_local local_unnamed_addr global i32 0, align 4, !dbg !5

; Function Attrs: minsize nofree nounwind optsize sspstrong memory(readwrite, argmem: none) uwtable
define dso_local i32 @foo() local_unnamed_addr #0 !dbg !15 {
  %1 = tail call dereferenceable_or_null(8) ptr @malloc(i64 noundef 8) #3, !dbg !21
  call void @llvm.dbg.value(metadata ptr %1, metadata !19, metadata !DIExpression()), !dbg !22
  %2 = load i32, ptr @g, align 4, !tbaa !23
  %.not = icmp eq i32 %2, 0
  %d.promoted = load i32, ptr @d, align 1, !tbaa !23
  br i1 %.not, label %12, label %.split, !dbg !27

.split:                                           ; preds = %0
  br label %3, !dbg !27

3:                                                ; preds = %10, %.split
  %4 = phi i32 [ %11, %10 ], [ %d.promoted, %.split ]
  %.not3 = icmp eq i32 %4, 0, !dbg !28
  br i1 %.not3, label %10, label %5, !dbg !30

5:                                                ; preds = %3
  %6 = load i32, ptr %1, align 4, !dbg !31, !tbaa !23
  %7 = add nsw i32 %6, 1, !dbg !31
  store i32 %7, ptr %1, align 4, !dbg !31, !tbaa !23
  store i32 0, ptr @d, align 4, !dbg !33, !tbaa !23
  %8 = icmp eq i32 %7, %2, !dbg !34
  br i1 %8, label %9, label %10, !dbg !36

9:                                                ; preds = %5
  store i32 0, ptr %1, align 4, !dbg !37, !tbaa !23
  br label %10, !dbg !38

10:                                               ; preds = %5, %9, %3
  %11 = phi i32 [ 0, %5 ], [ 0, %9 ], [ %4, %3 ]
  br label %3, !dbg !27, !llvm.loop !39

12:                                               ; preds = %0
  %13 = load i32, ptr @d, align 4, !dbg !42, !tbaa !23
  ret i32 %13, !dbg !43
}

; Function Attrs: minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #2

attributes #0 = { minsize nofree nounwind optsize sspstrong memory(readwrite, argmem: none) uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { minsize optsize allocsize(0) }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!8, !9, !10, !11, !12, !13}
!llvm.ident = !{!14}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "g", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 15.0.7", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, globals: !4, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "implicit_preprocessed.c", directory: "/home/michel/ETH/AST/llvm-project/example", checksumkind: CSK_MD5, checksum: "81ce551684fbaa4f3b88065f26c1ce40")
!4 = !{!5, !0}
!5 = !DIGlobalVariableExpression(var: !6, expr: !DIExpression())
!6 = distinct !DIGlobalVariable(name: "d", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !{i32 7, !"Dwarf Version", i32 5}
!9 = !{i32 2, !"Debug Info Version", i32 3}
!10 = !{i32 1, !"wchar_size", i32 4}
!11 = !{i32 8, !"PIC Level", i32 2}
!12 = !{i32 7, !"PIE Level", i32 2}
!13 = !{i32 7, !"uwtable", i32 2}
!14 = !{!"clang version 15.0.7"}
!15 = distinct !DISubprogram(name: "foo", scope: !3, file: !3, line: 2, type: !16, scopeLine: 2, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !18)
!16 = !DISubroutineType(types: !17)
!17 = !{!7}
!18 = !{!19}
!19 = !DILocalVariable(name: "i", scope: !15, file: !3, line: 3, type: !20)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!21 = !DILocation(line: 3, column: 12, scope: !15)
!22 = !DILocation(line: 0, scope: !15)
!23 = !{!24, !24, i64 0}
!24 = !{!"int", !25, i64 0}
!25 = !{!"omnipotent char", !26, i64 0}
!26 = !{!"Simple C/C++ TBAA"}
!27 = !DILocation(line: 4, column: 3, scope: !15)
!28 = !DILocation(line: 5, column: 9, scope: !29)
!29 = distinct !DILexicalBlock(scope: !15, file: !3, line: 5, column: 9)
!30 = !DILocation(line: 5, column: 9, scope: !15)
!31 = !DILocation(line: 6, column: 11, scope: !32)
!32 = distinct !DILexicalBlock(scope: !29, file: !3, line: 5, column: 12)
!33 = !DILocation(line: 7, column: 9, scope: !32)
!34 = !DILocation(line: 8, column: 16, scope: !35)
!35 = distinct !DILexicalBlock(scope: !32, file: !3, line: 8, column: 11)
!36 = !DILocation(line: 8, column: 11, scope: !32)
!37 = !DILocation(line: 9, column: 14, scope: !35)
!38 = !DILocation(line: 9, column: 9, scope: !35)
!39 = distinct !{!39, !27, !40, !41}
!40 = !DILocation(line: 10, column: 5, scope: !15)
!41 = !{!"llvm.loop.mustprogress"}
!42 = !DILocation(line: 11, column: 10, scope: !15)
!43 = !DILocation(line: 11, column: 3, scope: !15)
*** IR Dump After LICMPass on <unnamed loop> ***
; ModuleID = 'implicit_preprocessed.ll'
source_filename = "implicit_preprocessed.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@g = dso_local local_unnamed_addr global i32 0, align 4, !dbg !0
@d = dso_local local_unnamed_addr global i32 0, align 4, !dbg !5

; Function Attrs: minsize nofree nounwind optsize sspstrong memory(readwrite, argmem: none) uwtable
define dso_local i32 @foo() local_unnamed_addr #0 !dbg !15 {
  %1 = tail call dereferenceable_or_null(8) ptr @malloc(i64 noundef 8) #3, !dbg !21
  call void @llvm.dbg.value(metadata ptr %1, metadata !19, metadata !DIExpression()), !dbg !22
  %2 = load i32, ptr @g, align 4, !tbaa !23
  %.not = icmp eq i32 %2, 0
  %d.promoted = load i32, ptr @d, align 1, !tbaa !23
  br i1 %.not, label %12, label %.split, !dbg !27

.split:                                           ; preds = %0
  br label %3, !dbg !27

3:                                                ; preds = %10, %.split
  %4 = phi i32 [ %11, %10 ], [ %d.promoted, %.split ]
  %.not3 = icmp eq i32 %4, 0, !dbg !28
  br i1 %.not3, label %10, label %5, !dbg !30

5:                                                ; preds = %3
  %6 = load i32, ptr %1, align 4, !dbg !31, !tbaa !23
  %7 = add nsw i32 %6, 1, !dbg !31
  store i32 %7, ptr %1, align 4, !dbg !31, !tbaa !23
  %8 = icmp eq i32 %7, %2, !dbg !33
  br i1 %8, label %9, label %10, !dbg !35

9:                                                ; preds = %5
  store i32 0, ptr %1, align 4, !dbg !36, !tbaa !23
  br label %10, !dbg !37

10:                                               ; preds = %5, %9, %3
  %11 = phi i32 [ 0, %5 ], [ 0, %9 ], [ %4, %3 ]
  br label %3, !dbg !27, !llvm.loop !38

12:                                               ; preds = %0
  %13 = load i32, ptr @d, align 4, !dbg !41, !tbaa !23
  ret i32 %13, !dbg !42
}

; Function Attrs: minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #2

attributes #0 = { minsize nofree nounwind optsize sspstrong memory(readwrite, argmem: none) uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { minsize optsize allocsize(0) }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!8, !9, !10, !11, !12, !13}
!llvm.ident = !{!14}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "g", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 15.0.7", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, globals: !4, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "implicit_preprocessed.c", directory: "/home/michel/ETH/AST/llvm-project/example", checksumkind: CSK_MD5, checksum: "81ce551684fbaa4f3b88065f26c1ce40")
!4 = !{!5, !0}
!5 = !DIGlobalVariableExpression(var: !6, expr: !DIExpression())
!6 = distinct !DIGlobalVariable(name: "d", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !{i32 7, !"Dwarf Version", i32 5}
!9 = !{i32 2, !"Debug Info Version", i32 3}
!10 = !{i32 1, !"wchar_size", i32 4}
!11 = !{i32 8, !"PIC Level", i32 2}
!12 = !{i32 7, !"PIE Level", i32 2}
!13 = !{i32 7, !"uwtable", i32 2}
!14 = !{!"clang version 15.0.7"}
!15 = distinct !DISubprogram(name: "foo", scope: !3, file: !3, line: 2, type: !16, scopeLine: 2, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !18)
!16 = !DISubroutineType(types: !17)
!17 = !{!7}
!18 = !{!19}
!19 = !DILocalVariable(name: "i", scope: !15, file: !3, line: 3, type: !20)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!21 = !DILocation(line: 3, column: 12, scope: !15)
!22 = !DILocation(line: 0, scope: !15)
!23 = !{!24, !24, i64 0}
!24 = !{!"int", !25, i64 0}
!25 = !{!"omnipotent char", !26, i64 0}
!26 = !{!"Simple C/C++ TBAA"}
!27 = !DILocation(line: 4, column: 3, scope: !15)
!28 = !DILocation(line: 5, column: 9, scope: !29)
!29 = distinct !DILexicalBlock(scope: !15, file: !3, line: 5, column: 9)
!30 = !DILocation(line: 5, column: 9, scope: !15)
!31 = !DILocation(line: 6, column: 11, scope: !32)
!32 = distinct !DILexicalBlock(scope: !29, file: !3, line: 5, column: 12)
!33 = !DILocation(line: 8, column: 16, scope: !34)
!34 = distinct !DILexicalBlock(scope: !32, file: !3, line: 8, column: 11)
!35 = !DILocation(line: 8, column: 11, scope: !32)
!36 = !DILocation(line: 9, column: 14, scope: !34)
!37 = !DILocation(line: 9, column: 9, scope: !34)
!38 = distinct !{!38, !27, !39, !40}
!39 = !DILocation(line: 10, column: 5, scope: !15)
!40 = !{!"llvm.loop.mustprogress"}
!41 = !DILocation(line: 11, column: 10, scope: !15)
!42 = !DILocation(line: 11, column: 3, scope: !15)
*** IR Dump After LoopRotatePass on <unnamed loop> omitted because no change ***
*** IR Dump After LICMPass on <unnamed loop> omitted because no change ***
*** IR Dump After SimpleLoopUnswitchPass on <unnamed loop> omitted because no change ***
*** IR Pass PassManager<Loop, AnalysisManager<Loop, LoopStandardAnalysisResults&>, LoopStandardAnalysisResults&, LPMUpdater&> on <unnamed loop> ignored ***
*** IR Pass FunctionToLoopPassAdaptor on foo ignored ***
*** IR Dump After SimplifyCFGPass on foo ***
; ModuleID = 'implicit_preprocessed.ll'
source_filename = "implicit_preprocessed.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@g = dso_local local_unnamed_addr global i32 0, align 4, !dbg !0
@d = dso_local local_unnamed_addr global i32 0, align 4, !dbg !5

; Function Attrs: minsize nofree nounwind optsize sspstrong memory(readwrite, argmem: none) uwtable
define dso_local i32 @foo() local_unnamed_addr #0 !dbg !15 {
  %1 = tail call dereferenceable_or_null(8) ptr @malloc(i64 noundef 8) #3, !dbg !21
  call void @llvm.dbg.value(metadata ptr %1, metadata !19, metadata !DIExpression()), !dbg !22
  %2 = load i32, ptr @g, align 4, !tbaa !23
  %.not = icmp eq i32 %2, 0
  %d.promoted = load i32, ptr @d, align 1, !tbaa !23
  br i1 %.not, label %10, label %.split, !dbg !27

.split:                                           ; preds = %0, %8
  %3 = phi i32 [ %9, %8 ], [ %d.promoted, %0 ]
  %.not3 = icmp eq i32 %3, 0, !dbg !28
  br i1 %.not3, label %8, label %4, !dbg !30

4:                                                ; preds = %.split
  %5 = load i32, ptr %1, align 4, !dbg !31, !tbaa !23
  %6 = add nsw i32 %5, 1, !dbg !31
  store i32 %6, ptr %1, align 4, !dbg !31, !tbaa !23
  %7 = icmp eq i32 %6, %2, !dbg !33
  %spec.store.select = select i1 %7, i32 0, i32 %6, !dbg !35
  store i32 %spec.store.select, ptr %1, align 4, !dbg !36
  br label %8, !dbg !35

8:                                                ; preds = %4, %.split
  %9 = phi i32 [ %3, %.split ], [ 0, %4 ]
  br label %.split, !dbg !27, !llvm.loop !37

10:                                               ; preds = %0
  %11 = load i32, ptr @d, align 4, !dbg !40, !tbaa !23
  ret i32 %11, !dbg !41
}

; Function Attrs: minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #2

attributes #0 = { minsize nofree nounwind optsize sspstrong memory(readwrite, argmem: none) uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { minsize optsize allocsize(0) }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!8, !9, !10, !11, !12, !13}
!llvm.ident = !{!14}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "g", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 15.0.7", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, globals: !4, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "implicit_preprocessed.c", directory: "/home/michel/ETH/AST/llvm-project/example", checksumkind: CSK_MD5, checksum: "81ce551684fbaa4f3b88065f26c1ce40")
!4 = !{!5, !0}
!5 = !DIGlobalVariableExpression(var: !6, expr: !DIExpression())
!6 = distinct !DIGlobalVariable(name: "d", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !{i32 7, !"Dwarf Version", i32 5}
!9 = !{i32 2, !"Debug Info Version", i32 3}
!10 = !{i32 1, !"wchar_size", i32 4}
!11 = !{i32 8, !"PIC Level", i32 2}
!12 = !{i32 7, !"PIE Level", i32 2}
!13 = !{i32 7, !"uwtable", i32 2}
!14 = !{!"clang version 15.0.7"}
!15 = distinct !DISubprogram(name: "foo", scope: !3, file: !3, line: 2, type: !16, scopeLine: 2, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !18)
!16 = !DISubroutineType(types: !17)
!17 = !{!7}
!18 = !{!19}
!19 = !DILocalVariable(name: "i", scope: !15, file: !3, line: 3, type: !20)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!21 = !DILocation(line: 3, column: 12, scope: !15)
!22 = !DILocation(line: 0, scope: !15)
!23 = !{!24, !24, i64 0}
!24 = !{!"int", !25, i64 0}
!25 = !{!"omnipotent char", !26, i64 0}
!26 = !{!"Simple C/C++ TBAA"}
!27 = !DILocation(line: 4, column: 3, scope: !15)
!28 = !DILocation(line: 5, column: 9, scope: !29)
!29 = distinct !DILexicalBlock(scope: !15, file: !3, line: 5, column: 9)
!30 = !DILocation(line: 5, column: 9, scope: !15)
!31 = !DILocation(line: 6, column: 11, scope: !32)
!32 = distinct !DILexicalBlock(scope: !29, file: !3, line: 5, column: 12)
!33 = !DILocation(line: 8, column: 16, scope: !34)
!34 = distinct !DILexicalBlock(scope: !32, file: !3, line: 8, column: 11)
!35 = !DILocation(line: 8, column: 11, scope: !32)
!36 = !DILocation(line: 0, scope: !32)
!37 = distinct !{!37, !27, !38, !39}
!38 = !DILocation(line: 10, column: 5, scope: !15)
!39 = !{!"llvm.loop.mustprogress"}
!40 = !DILocation(line: 11, column: 10, scope: !15)
!41 = !DILocation(line: 11, column: 3, scope: !15)
*** IR Dump After InstCombinePass on foo ***
; ModuleID = 'implicit_preprocessed.ll'
source_filename = "implicit_preprocessed.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@g = dso_local local_unnamed_addr global i32 0, align 4, !dbg !0
@d = dso_local local_unnamed_addr global i32 0, align 4, !dbg !5

; Function Attrs: minsize nofree nounwind optsize sspstrong memory(readwrite, argmem: none) uwtable
define dso_local i32 @foo() local_unnamed_addr #0 !dbg !15 {
  %1 = tail call dereferenceable_or_null(8) ptr @malloc(i64 noundef 8) #3, !dbg !21
  call void @llvm.dbg.value(metadata ptr %1, metadata !19, metadata !DIExpression()), !dbg !22
  %2 = load i32, ptr @g, align 4, !tbaa !23
  %.not = icmp eq i32 %2, 0
  %d.promoted = load i32, ptr @d, align 4, !tbaa !23
  br i1 %.not, label %10, label %.split, !dbg !27

.split:                                           ; preds = %0, %8
  %3 = phi i32 [ %9, %8 ], [ %d.promoted, %0 ]
  %.not3 = icmp eq i32 %3, 0, !dbg !28
  br i1 %.not3, label %8, label %4, !dbg !30

4:                                                ; preds = %.split
  %5 = load i32, ptr %1, align 4, !dbg !31, !tbaa !23
  %6 = add nsw i32 %5, 1, !dbg !31
  %7 = icmp eq i32 %6, %2, !dbg !33
  %spec.store.select = select i1 %7, i32 0, i32 %6, !dbg !35
  store i32 %spec.store.select, ptr %1, align 4, !dbg !36
  br label %8, !dbg !35

8:                                                ; preds = %4, %.split
  %9 = phi i32 [ %3, %.split ], [ 0, %4 ]
  br label %.split, !dbg !27, !llvm.loop !37

10:                                               ; preds = %0
  %11 = load i32, ptr @d, align 4, !dbg !40, !tbaa !23
  ret i32 %11, !dbg !41
}

; Function Attrs: minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #2

attributes #0 = { minsize nofree nounwind optsize sspstrong memory(readwrite, argmem: none) uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { minsize optsize allocsize(0) }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!8, !9, !10, !11, !12, !13}
!llvm.ident = !{!14}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "g", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 15.0.7", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, globals: !4, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "implicit_preprocessed.c", directory: "/home/michel/ETH/AST/llvm-project/example", checksumkind: CSK_MD5, checksum: "81ce551684fbaa4f3b88065f26c1ce40")
!4 = !{!5, !0}
!5 = !DIGlobalVariableExpression(var: !6, expr: !DIExpression())
!6 = distinct !DIGlobalVariable(name: "d", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !{i32 7, !"Dwarf Version", i32 5}
!9 = !{i32 2, !"Debug Info Version", i32 3}
!10 = !{i32 1, !"wchar_size", i32 4}
!11 = !{i32 8, !"PIC Level", i32 2}
!12 = !{i32 7, !"PIE Level", i32 2}
!13 = !{i32 7, !"uwtable", i32 2}
!14 = !{!"clang version 15.0.7"}
!15 = distinct !DISubprogram(name: "foo", scope: !3, file: !3, line: 2, type: !16, scopeLine: 2, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !18)
!16 = !DISubroutineType(types: !17)
!17 = !{!7}
!18 = !{!19}
!19 = !DILocalVariable(name: "i", scope: !15, file: !3, line: 3, type: !20)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!21 = !DILocation(line: 3, column: 12, scope: !15)
!22 = !DILocation(line: 0, scope: !15)
!23 = !{!24, !24, i64 0}
!24 = !{!"int", !25, i64 0}
!25 = !{!"omnipotent char", !26, i64 0}
!26 = !{!"Simple C/C++ TBAA"}
!27 = !DILocation(line: 4, column: 3, scope: !15)
!28 = !DILocation(line: 5, column: 9, scope: !29)
!29 = distinct !DILexicalBlock(scope: !15, file: !3, line: 5, column: 9)
!30 = !DILocation(line: 5, column: 9, scope: !15)
!31 = !DILocation(line: 6, column: 11, scope: !32)
!32 = distinct !DILexicalBlock(scope: !29, file: !3, line: 5, column: 12)
!33 = !DILocation(line: 8, column: 16, scope: !34)
!34 = distinct !DILexicalBlock(scope: !32, file: !3, line: 8, column: 11)
!35 = !DILocation(line: 8, column: 11, scope: !32)
!36 = !DILocation(line: 0, scope: !32)
!37 = distinct !{!37, !27, !38, !39}
!38 = !DILocation(line: 10, column: 5, scope: !15)
!39 = !{!"llvm.loop.mustprogress"}
!40 = !DILocation(line: 11, column: 10, scope: !15)
!41 = !DILocation(line: 11, column: 3, scope: !15)
*** IR Dump After LoopSimplifyPass on foo ***
; ModuleID = 'implicit_preprocessed.ll'
source_filename = "implicit_preprocessed.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@g = dso_local local_unnamed_addr global i32 0, align 4, !dbg !0
@d = dso_local local_unnamed_addr global i32 0, align 4, !dbg !5

; Function Attrs: minsize nofree nounwind optsize sspstrong memory(readwrite, argmem: none) uwtable
define dso_local i32 @foo() local_unnamed_addr #0 !dbg !15 {
  %1 = tail call dereferenceable_or_null(8) ptr @malloc(i64 noundef 8) #3, !dbg !21
  call void @llvm.dbg.value(metadata ptr %1, metadata !19, metadata !DIExpression()), !dbg !22
  %2 = load i32, ptr @g, align 4, !tbaa !23
  %.not = icmp eq i32 %2, 0
  %d.promoted = load i32, ptr @d, align 4, !tbaa !23
  br i1 %.not, label %10, label %.split.preheader, !dbg !27

.split.preheader:                                 ; preds = %0
  br label %.split, !dbg !27

.split:                                           ; preds = %.split.preheader, %8
  %3 = phi i32 [ %9, %8 ], [ %d.promoted, %.split.preheader ]
  %.not3 = icmp eq i32 %3, 0, !dbg !28
  br i1 %.not3, label %8, label %4, !dbg !30

4:                                                ; preds = %.split
  %5 = load i32, ptr %1, align 4, !dbg !31, !tbaa !23
  %6 = add nsw i32 %5, 1, !dbg !31
  %7 = icmp eq i32 %6, %2, !dbg !33
  %spec.store.select = select i1 %7, i32 0, i32 %6, !dbg !35
  store i32 %spec.store.select, ptr %1, align 4, !dbg !36
  br label %8, !dbg !35

8:                                                ; preds = %4, %.split
  %9 = phi i32 [ %3, %.split ], [ 0, %4 ]
  br label %.split, !dbg !27, !llvm.loop !37

10:                                               ; preds = %0
  %11 = load i32, ptr @d, align 4, !dbg !40, !tbaa !23
  ret i32 %11, !dbg !41
}

; Function Attrs: minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #2

attributes #0 = { minsize nofree nounwind optsize sspstrong memory(readwrite, argmem: none) uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { minsize optsize allocsize(0) }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!8, !9, !10, !11, !12, !13}
!llvm.ident = !{!14}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "g", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 15.0.7", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, globals: !4, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "implicit_preprocessed.c", directory: "/home/michel/ETH/AST/llvm-project/example", checksumkind: CSK_MD5, checksum: "81ce551684fbaa4f3b88065f26c1ce40")
!4 = !{!5, !0}
!5 = !DIGlobalVariableExpression(var: !6, expr: !DIExpression())
!6 = distinct !DIGlobalVariable(name: "d", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !{i32 7, !"Dwarf Version", i32 5}
!9 = !{i32 2, !"Debug Info Version", i32 3}
!10 = !{i32 1, !"wchar_size", i32 4}
!11 = !{i32 8, !"PIC Level", i32 2}
!12 = !{i32 7, !"PIE Level", i32 2}
!13 = !{i32 7, !"uwtable", i32 2}
!14 = !{!"clang version 15.0.7"}
!15 = distinct !DISubprogram(name: "foo", scope: !3, file: !3, line: 2, type: !16, scopeLine: 2, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !18)
!16 = !DISubroutineType(types: !17)
!17 = !{!7}
!18 = !{!19}
!19 = !DILocalVariable(name: "i", scope: !15, file: !3, line: 3, type: !20)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!21 = !DILocation(line: 3, column: 12, scope: !15)
!22 = !DILocation(line: 0, scope: !15)
!23 = !{!24, !24, i64 0}
!24 = !{!"int", !25, i64 0}
!25 = !{!"omnipotent char", !26, i64 0}
!26 = !{!"Simple C/C++ TBAA"}
!27 = !DILocation(line: 4, column: 3, scope: !15)
!28 = !DILocation(line: 5, column: 9, scope: !29)
!29 = distinct !DILexicalBlock(scope: !15, file: !3, line: 5, column: 9)
!30 = !DILocation(line: 5, column: 9, scope: !15)
!31 = !DILocation(line: 6, column: 11, scope: !32)
!32 = distinct !DILexicalBlock(scope: !29, file: !3, line: 5, column: 12)
!33 = !DILocation(line: 8, column: 16, scope: !34)
!34 = distinct !DILexicalBlock(scope: !32, file: !3, line: 8, column: 11)
!35 = !DILocation(line: 8, column: 11, scope: !32)
!36 = !DILocation(line: 0, scope: !32)
!37 = distinct !{!37, !27, !38, !39}
!38 = !DILocation(line: 10, column: 5, scope: !15)
!39 = !{!"llvm.loop.mustprogress"}
!40 = !DILocation(line: 11, column: 10, scope: !15)
!41 = !DILocation(line: 11, column: 3, scope: !15)
*** IR Dump After LCSSAPass on foo omitted because no change ***
*** IR Pass PassManager<Function> on foo ignored ***
*** IR Dump After LoopIdiomRecognizePass on .split omitted because no change ***
*** IR Dump After IndVarSimplifyPass on .split omitted because no change ***
*** IR Dump After LoopDeletionPass on .split omitted because no change ***
*** IR Dump After LoopFullUnrollPass on .split omitted because no change ***
*** IR Pass PassManager<Loop, AnalysisManager<Loop, LoopStandardAnalysisResults&>, LoopStandardAnalysisResults&, LPMUpdater&> on .split ignored ***
*** IR Pass FunctionToLoopPassAdaptor on foo ignored ***
*** IR Dump After SROAPass on foo omitted because no change ***
*** IR Dump After VectorCombinePass on foo omitted because no change ***
*** IR Dump After MergedLoadStoreMotionPass on foo omitted because no change ***
*** IR Dump After GVNPass on foo ***
; ModuleID = 'implicit_preprocessed.ll'
source_filename = "implicit_preprocessed.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@g = dso_local local_unnamed_addr global i32 0, align 4, !dbg !0
@d = dso_local local_unnamed_addr global i32 0, align 4, !dbg !5

; Function Attrs: minsize nofree nounwind optsize sspstrong memory(readwrite, argmem: none) uwtable
define dso_local i32 @foo() local_unnamed_addr #0 !dbg !15 {
  %1 = tail call dereferenceable_or_null(8) ptr @malloc(i64 noundef 8) #3, !dbg !21
  call void @llvm.dbg.value(metadata ptr %1, metadata !19, metadata !DIExpression()), !dbg !22
  %2 = load i32, ptr @g, align 4, !tbaa !23
  %.not = icmp eq i32 %2, 0
  %d.promoted = load i32, ptr @d, align 4, !tbaa !23
  br i1 %.not, label %10, label %.split.preheader, !dbg !27

.split.preheader:                                 ; preds = %0
  br label %.split, !dbg !27

.split:                                           ; preds = %.split.preheader, %8
  %3 = phi i32 [ %9, %8 ], [ undef, %.split.preheader ]
  %4 = phi i32 [ 0, %8 ], [ %d.promoted, %.split.preheader ]
  %.not3 = icmp eq i32 %4, 0, !dbg !28
  br i1 %.not3, label %8, label %5, !dbg !30

5:                                                ; preds = %.split
  %6 = add nsw i32 %3, 1, !dbg !31
  %7 = icmp eq i32 %6, %2, !dbg !33
  %spec.store.select = select i1 %7, i32 0, i32 %6, !dbg !35
  store i32 %spec.store.select, ptr %1, align 4, !dbg !36
  br label %8, !dbg !35

8:                                                ; preds = %5, %.split
  %9 = phi i32 [ %3, %.split ], [ %spec.store.select, %5 ]
  br label %.split, !dbg !27, !llvm.loop !37

10:                                               ; preds = %0
  ret i32 %d.promoted, !dbg !40
}

; Function Attrs: minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #2

attributes #0 = { minsize nofree nounwind optsize sspstrong memory(readwrite, argmem: none) uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { minsize optsize allocsize(0) }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!8, !9, !10, !11, !12, !13}
!llvm.ident = !{!14}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "g", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 15.0.7", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, globals: !4, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "implicit_preprocessed.c", directory: "/home/michel/ETH/AST/llvm-project/example", checksumkind: CSK_MD5, checksum: "81ce551684fbaa4f3b88065f26c1ce40")
!4 = !{!5, !0}
!5 = !DIGlobalVariableExpression(var: !6, expr: !DIExpression())
!6 = distinct !DIGlobalVariable(name: "d", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !{i32 7, !"Dwarf Version", i32 5}
!9 = !{i32 2, !"Debug Info Version", i32 3}
!10 = !{i32 1, !"wchar_size", i32 4}
!11 = !{i32 8, !"PIC Level", i32 2}
!12 = !{i32 7, !"PIE Level", i32 2}
!13 = !{i32 7, !"uwtable", i32 2}
!14 = !{!"clang version 15.0.7"}
!15 = distinct !DISubprogram(name: "foo", scope: !3, file: !3, line: 2, type: !16, scopeLine: 2, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !18)
!16 = !DISubroutineType(types: !17)
!17 = !{!7}
!18 = !{!19}
!19 = !DILocalVariable(name: "i", scope: !15, file: !3, line: 3, type: !20)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!21 = !DILocation(line: 3, column: 12, scope: !15)
!22 = !DILocation(line: 0, scope: !15)
!23 = !{!24, !24, i64 0}
!24 = !{!"int", !25, i64 0}
!25 = !{!"omnipotent char", !26, i64 0}
!26 = !{!"Simple C/C++ TBAA"}
!27 = !DILocation(line: 4, column: 3, scope: !15)
!28 = !DILocation(line: 5, column: 9, scope: !29)
!29 = distinct !DILexicalBlock(scope: !15, file: !3, line: 5, column: 9)
!30 = !DILocation(line: 5, column: 9, scope: !15)
!31 = !DILocation(line: 6, column: 11, scope: !32)
!32 = distinct !DILexicalBlock(scope: !29, file: !3, line: 5, column: 12)
!33 = !DILocation(line: 8, column: 16, scope: !34)
!34 = distinct !DILexicalBlock(scope: !32, file: !3, line: 8, column: 11)
!35 = !DILocation(line: 8, column: 11, scope: !32)
!36 = !DILocation(line: 0, scope: !32)
!37 = distinct !{!37, !27, !38, !39}
!38 = !DILocation(line: 10, column: 5, scope: !15)
!39 = !{!"llvm.loop.mustprogress"}
!40 = !DILocation(line: 11, column: 3, scope: !15)
*** IR Dump After SCCPPass on foo omitted because no change ***
*** IR Dump After BDCEPass on foo omitted because no change ***
*** IR Dump After InstCombinePass on foo ***
; ModuleID = 'implicit_preprocessed.ll'
source_filename = "implicit_preprocessed.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@g = dso_local local_unnamed_addr global i32 0, align 4, !dbg !0
@d = dso_local local_unnamed_addr global i32 0, align 4, !dbg !5

; Function Attrs: minsize nofree nounwind optsize sspstrong memory(readwrite, argmem: none) uwtable
define dso_local i32 @foo() local_unnamed_addr #0 !dbg !15 {
  call void @llvm.dbg.value(metadata ptr poison, metadata !19, metadata !DIExpression()), !dbg !21
  %1 = load i32, ptr @g, align 4, !tbaa !22
  %.not = icmp eq i32 %1, 0
  %d.promoted = load i32, ptr @d, align 4, !tbaa !22
  br i1 %.not, label %9, label %.split.preheader, !dbg !26

.split.preheader:                                 ; preds = %0
  %2 = icmp eq i32 %d.promoted, 0, !dbg !27
  br label %.split, !dbg !26

.split:                                           ; preds = %.split.preheader, %7
  %3 = phi i32 [ %8, %7 ], [ undef, %.split.preheader ]
  %.not3 = phi i1 [ true, %7 ], [ %2, %.split.preheader ]
  br i1 %.not3, label %7, label %4, !dbg !29

4:                                                ; preds = %.split
  %5 = add nsw i32 %3, 1, !dbg !30
  %6 = icmp eq i32 %5, %1, !dbg !32
  %spec.store.select = select i1 %6, i32 0, i32 %5, !dbg !34
  br label %7, !dbg !34

7:                                                ; preds = %4, %.split
  %8 = phi i32 [ %3, %.split ], [ %spec.store.select, %4 ]
  br label %.split, !dbg !26, !llvm.loop !35

9:                                                ; preds = %0
  ret i32 %d.promoted, !dbg !38
}

; Function Attrs: minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #2

attributes #0 = { minsize nofree nounwind optsize sspstrong memory(readwrite, argmem: none) uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!8, !9, !10, !11, !12, !13}
!llvm.ident = !{!14}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "g", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 15.0.7", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, globals: !4, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "implicit_preprocessed.c", directory: "/home/michel/ETH/AST/llvm-project/example", checksumkind: CSK_MD5, checksum: "81ce551684fbaa4f3b88065f26c1ce40")
!4 = !{!5, !0}
!5 = !DIGlobalVariableExpression(var: !6, expr: !DIExpression())
!6 = distinct !DIGlobalVariable(name: "d", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !{i32 7, !"Dwarf Version", i32 5}
!9 = !{i32 2, !"Debug Info Version", i32 3}
!10 = !{i32 1, !"wchar_size", i32 4}
!11 = !{i32 8, !"PIC Level", i32 2}
!12 = !{i32 7, !"PIE Level", i32 2}
!13 = !{i32 7, !"uwtable", i32 2}
!14 = !{!"clang version 15.0.7"}
!15 = distinct !DISubprogram(name: "foo", scope: !3, file: !3, line: 2, type: !16, scopeLine: 2, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !18)
!16 = !DISubroutineType(types: !17)
!17 = !{!7}
!18 = !{!19}
!19 = !DILocalVariable(name: "i", scope: !15, file: !3, line: 3, type: !20)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!21 = !DILocation(line: 0, scope: !15)
!22 = !{!23, !23, i64 0}
!23 = !{!"int", !24, i64 0}
!24 = !{!"omnipotent char", !25, i64 0}
!25 = !{!"Simple C/C++ TBAA"}
!26 = !DILocation(line: 4, column: 3, scope: !15)
!27 = !DILocation(line: 5, column: 9, scope: !28)
!28 = distinct !DILexicalBlock(scope: !15, file: !3, line: 5, column: 9)
!29 = !DILocation(line: 5, column: 9, scope: !15)
!30 = !DILocation(line: 6, column: 11, scope: !31)
!31 = distinct !DILexicalBlock(scope: !28, file: !3, line: 5, column: 12)
!32 = !DILocation(line: 8, column: 16, scope: !33)
!33 = distinct !DILexicalBlock(scope: !31, file: !3, line: 8, column: 11)
!34 = !DILocation(line: 8, column: 11, scope: !31)
!35 = distinct !{!35, !26, !36, !37}
!36 = !DILocation(line: 10, column: 5, scope: !15)
!37 = !{!"llvm.loop.mustprogress"}
!38 = !DILocation(line: 11, column: 3, scope: !15)
*** IR Dump After JumpThreadingPass on foo omitted because no change ***
*** IR Dump After CorrelatedValuePropagationPass on foo omitted because no change ***
*** IR Dump After ADCEPass on foo ***
; ModuleID = 'implicit_preprocessed.ll'
source_filename = "implicit_preprocessed.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@g = dso_local local_unnamed_addr global i32 0, align 4, !dbg !0
@d = dso_local local_unnamed_addr global i32 0, align 4, !dbg !5

; Function Attrs: minsize nofree nounwind optsize sspstrong memory(readwrite, argmem: none) uwtable
define dso_local i32 @foo() local_unnamed_addr #0 !dbg !15 {
  call void @llvm.dbg.value(metadata ptr poison, metadata !19, metadata !DIExpression()), !dbg !21
  %1 = load i32, ptr @g, align 4, !tbaa !22
  %.not = icmp eq i32 %1, 0
  %d.promoted = load i32, ptr @d, align 4, !tbaa !22
  br i1 %.not, label %5, label %.split.preheader, !dbg !26

.split.preheader:                                 ; preds = %0
  %2 = icmp eq i32 %d.promoted, 0, !dbg !27
  br label %.split, !dbg !26

.split:                                           ; preds = %.split.preheader, %4
  %.not3 = phi i1 [ true, %4 ], [ %2, %.split.preheader ]
  br i1 %.not3, label %4, label %3, !dbg !29

3:                                                ; preds = %.split
  br label %4, !dbg !30

4:                                                ; preds = %3, %.split
  br label %.split, !dbg !26, !llvm.loop !32

5:                                                ; preds = %0
  ret i32 %d.promoted, !dbg !35
}

; Function Attrs: minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #2

attributes #0 = { minsize nofree nounwind optsize sspstrong memory(readwrite, argmem: none) uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!8, !9, !10, !11, !12, !13}
!llvm.ident = !{!14}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "g", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 15.0.7", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, globals: !4, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "implicit_preprocessed.c", directory: "/home/michel/ETH/AST/llvm-project/example", checksumkind: CSK_MD5, checksum: "81ce551684fbaa4f3b88065f26c1ce40")
!4 = !{!5, !0}
!5 = !DIGlobalVariableExpression(var: !6, expr: !DIExpression())
!6 = distinct !DIGlobalVariable(name: "d", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !{i32 7, !"Dwarf Version", i32 5}
!9 = !{i32 2, !"Debug Info Version", i32 3}
!10 = !{i32 1, !"wchar_size", i32 4}
!11 = !{i32 8, !"PIC Level", i32 2}
!12 = !{i32 7, !"PIE Level", i32 2}
!13 = !{i32 7, !"uwtable", i32 2}
!14 = !{!"clang version 15.0.7"}
!15 = distinct !DISubprogram(name: "foo", scope: !3, file: !3, line: 2, type: !16, scopeLine: 2, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !18)
!16 = !DISubroutineType(types: !17)
!17 = !{!7}
!18 = !{!19}
!19 = !DILocalVariable(name: "i", scope: !15, file: !3, line: 3, type: !20)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!21 = !DILocation(line: 0, scope: !15)
!22 = !{!23, !23, i64 0}
!23 = !{!"int", !24, i64 0}
!24 = !{!"omnipotent char", !25, i64 0}
!25 = !{!"Simple C/C++ TBAA"}
!26 = !DILocation(line: 4, column: 3, scope: !15)
!27 = !DILocation(line: 5, column: 9, scope: !28)
!28 = distinct !DILexicalBlock(scope: !15, file: !3, line: 5, column: 9)
!29 = !DILocation(line: 5, column: 9, scope: !15)
!30 = !DILocation(line: 8, column: 11, scope: !31)
!31 = distinct !DILexicalBlock(scope: !28, file: !3, line: 5, column: 12)
!32 = distinct !{!32, !26, !33, !34}
!33 = !DILocation(line: 10, column: 5, scope: !15)
!34 = !{!"llvm.loop.mustprogress"}
!35 = !DILocation(line: 11, column: 3, scope: !15)
*** IR Dump After MemCpyOptPass on foo omitted because no change ***
*** IR Dump After DSEPass on foo omitted because no change ***
*** IR Dump After LoopSimplifyPass on foo omitted because no change ***
*** IR Dump After LCSSAPass on foo omitted because no change ***
*** IR Pass PassManager<Function> on foo ignored ***
*** IR Dump After LICMPass on .split omitted because no change ***
*** IR Pass FunctionToLoopPassAdaptor on foo ignored ***
*** IR Dump After CoroElidePass on foo omitted because no change ***
*** IR Dump After SimplifyCFGPass on foo ***
; ModuleID = 'implicit_preprocessed.ll'
source_filename = "implicit_preprocessed.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@g = dso_local local_unnamed_addr global i32 0, align 4, !dbg !0
@d = dso_local local_unnamed_addr global i32 0, align 4, !dbg !5

; Function Attrs: minsize nofree nounwind optsize sspstrong memory(readwrite, argmem: none) uwtable
define dso_local i32 @foo() local_unnamed_addr #0 !dbg !15 {
  call void @llvm.dbg.value(metadata ptr poison, metadata !19, metadata !DIExpression()), !dbg !21
  %1 = load i32, ptr @g, align 4, !tbaa !22
  %.not = icmp eq i32 %1, 0
  %d.promoted = load i32, ptr @d, align 4, !tbaa !22
  br i1 %.not, label %2, label %.critedge, !dbg !26

.critedge:                                        ; preds = %0, %.critedge
  br label %.critedge, !dbg !27

2:                                                ; preds = %0
  ret i32 %d.promoted, !dbg !28
}

; Function Attrs: minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #2

attributes #0 = { minsize nofree nounwind optsize sspstrong memory(readwrite, argmem: none) uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!8, !9, !10, !11, !12, !13}
!llvm.ident = !{!14}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "g", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 15.0.7", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, globals: !4, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "implicit_preprocessed.c", directory: "/home/michel/ETH/AST/llvm-project/example", checksumkind: CSK_MD5, checksum: "81ce551684fbaa4f3b88065f26c1ce40")
!4 = !{!5, !0}
!5 = !DIGlobalVariableExpression(var: !6, expr: !DIExpression())
!6 = distinct !DIGlobalVariable(name: "d", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !{i32 7, !"Dwarf Version", i32 5}
!9 = !{i32 2, !"Debug Info Version", i32 3}
!10 = !{i32 1, !"wchar_size", i32 4}
!11 = !{i32 8, !"PIC Level", i32 2}
!12 = !{i32 7, !"PIE Level", i32 2}
!13 = !{i32 7, !"uwtable", i32 2}
!14 = !{!"clang version 15.0.7"}
!15 = distinct !DISubprogram(name: "foo", scope: !3, file: !3, line: 2, type: !16, scopeLine: 2, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !18)
!16 = !DISubroutineType(types: !17)
!17 = !{!7}
!18 = !{!19}
!19 = !DILocalVariable(name: "i", scope: !15, file: !3, line: 3, type: !20)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!21 = !DILocation(line: 0, scope: !15)
!22 = !{!23, !23, i64 0}
!23 = !{!"int", !24, i64 0}
!24 = !{!"omnipotent char", !25, i64 0}
!25 = !{!"Simple C/C++ TBAA"}
!26 = !DILocation(line: 4, column: 3, scope: !15)
!27 = !DILocation(line: 5, column: 9, scope: !15)
!28 = !DILocation(line: 11, column: 3, scope: !15)
*** IR Dump After InstCombinePass on foo ***
; ModuleID = 'implicit_preprocessed.ll'
source_filename = "implicit_preprocessed.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@g = dso_local local_unnamed_addr global i32 0, align 4, !dbg !0
@d = dso_local local_unnamed_addr global i32 0, align 4, !dbg !5

; Function Attrs: minsize nofree nounwind optsize sspstrong memory(readwrite, argmem: none) uwtable
define dso_local i32 @foo() local_unnamed_addr #0 !dbg !15 {
  call void @llvm.dbg.value(metadata ptr poison, metadata !19, metadata !DIExpression()), !dbg !21
  %1 = load i32, ptr @g, align 4, !tbaa !22
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %2, label %.critedge, !dbg !26

.critedge:                                        ; preds = %0, %.critedge
  br label %.critedge, !dbg !27

2:                                                ; preds = %0
  %d.promoted = load i32, ptr @d, align 4, !tbaa !22
  ret i32 %d.promoted, !dbg !28
}

; Function Attrs: minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #2

attributes #0 = { minsize nofree nounwind optsize sspstrong memory(readwrite, argmem: none) uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { minsize mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!8, !9, !10, !11, !12, !13}
!llvm.ident = !{!14}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "g", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 15.0.7", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, globals: !4, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "implicit_preprocessed.c", directory: "/home/michel/ETH/AST/llvm-project/example", checksumkind: CSK_MD5, checksum: "81ce551684fbaa4f3b88065f26c1ce40")
!4 = !{!5, !0}
!5 = !DIGlobalVariableExpression(var: !6, expr: !DIExpression())
!6 = distinct !DIGlobalVariable(name: "d", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !{i32 7, !"Dwarf Version", i32 5}
!9 = !{i32 2, !"Debug Info Version", i32 3}
!10 = !{i32 1, !"wchar_size", i32 4}
!11 = !{i32 8, !"PIC Level", i32 2}
!12 = !{i32 7, !"PIE Level", i32 2}
!13 = !{i32 7, !"uwtable", i32 2}
!14 = !{!"clang version 15.0.7"}
!15 = distinct !DISubprogram(name: "foo", scope: !3, file: !3, line: 2, type: !16, scopeLine: 2, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !18)
!16 = !DISubroutineType(types: !17)
!17 = !{!7}
!18 = !{!19}
!19 = !DILocalVariable(name: "i", scope: !15, file: !3, line: 3, type: !20)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!21 = !DILocation(line: 0, scope: !15)
!22 = !{!23, !23, i64 0}
!23 = !{!"int", !24, i64 0}
!24 = !{!"omnipotent char", !25, i64 0}
!25 = !{!"Simple C/C++ TBAA"}
!26 = !DILocation(line: 4, column: 3, scope: !15)
!27 = !DILocation(line: 5, column: 9, scope: !15)
!28 = !DILocation(line: 11, column: 3, scope: !15)
*** IR Pass PassManager<Function> on foo ignored ***
*** IR Pass CGSCCToFunctionPassAdaptor on (foo) ignored ***
*** IR Dump After CoroSplitPass on (foo) omitted because no change ***
*** IR Pass PassManager<LazyCallGraph::SCC, AnalysisManager<LazyCallGraph::SCC, LazyCallGraph&>, LazyCallGraph&, CGSCCUpdateResult&> on (foo) ignored ***
*** IR Pass DevirtSCCRepeatedPass on (foo) ignored ***
*** IR Pass ModuleToPostOrderCGSCCPassAdaptor on [module] ignored ***
*** IR Dump After InvalidateAnalysisPass<ShouldNotRunFunctionPassesAnalysis> on foo omitted because no change ***
*** IR Pass ModuleToFunctionPassAdaptor on [module] ignored ***
*** IR Pass ModuleInlinerWrapperPass on [module] ignored ***
*** IR Dump After DeadArgumentEliminationPass on [module] omitted because no change ***
*** IR Dump After CoroCleanupPass on [module] omitted because no change ***
*** IR Dump After GlobalOptPass on [module] ***
; ModuleID = 'implicit_preprocessed.ll'
source_filename = "implicit_preprocessed.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@g = dso_local local_unnamed_addr global i32 0, align 4, !dbg !0
@d = dso_local local_unnamed_addr global i32 0, align 4, !dbg !5

; Function Attrs: minsize nofree nounwind optsize sspstrong memory(readwrite, argmem: none) uwtable
define dso_local i32 @foo() local_unnamed_addr #0 !dbg !15 {
  call void @llvm.dbg.value(metadata ptr poison, metadata !19, metadata !DIExpression()), !dbg !21
  %1 = load i32, ptr @g, align 4, !tbaa !22
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %2, label %.critedge, !dbg !26

.critedge:                                        ; preds = %0, %.critedge
  br label %.critedge, !dbg !27

2:                                                ; preds = %0
  %d.promoted = load i32, ptr @d, align 4, !tbaa !22
  ret i32 %d.promoted, !dbg !28
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

attributes #0 = { minsize nofree nounwind optsize sspstrong memory(readwrite, argmem: none) uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!8, !9, !10, !11, !12, !13}
!llvm.ident = !{!14}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "g", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 15.0.7", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, globals: !4, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "implicit_preprocessed.c", directory: "/home/michel/ETH/AST/llvm-project/example", checksumkind: CSK_MD5, checksum: "81ce551684fbaa4f3b88065f26c1ce40")
!4 = !{!5, !0}
!5 = !DIGlobalVariableExpression(var: !6, expr: !DIExpression())
!6 = distinct !DIGlobalVariable(name: "d", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !{i32 7, !"Dwarf Version", i32 5}
!9 = !{i32 2, !"Debug Info Version", i32 3}
!10 = !{i32 1, !"wchar_size", i32 4}
!11 = !{i32 8, !"PIC Level", i32 2}
!12 = !{i32 7, !"PIE Level", i32 2}
!13 = !{i32 7, !"uwtable", i32 2}
!14 = !{!"clang version 15.0.7"}
!15 = distinct !DISubprogram(name: "foo", scope: !3, file: !3, line: 2, type: !16, scopeLine: 2, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !18)
!16 = !DISubroutineType(types: !17)
!17 = !{!7}
!18 = !{!19}
!19 = !DILocalVariable(name: "i", scope: !15, file: !3, line: 3, type: !20)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!21 = !DILocation(line: 0, scope: !15)
!22 = !{!23, !23, i64 0}
!23 = !{!"int", !24, i64 0}
!24 = !{!"omnipotent char", !25, i64 0}
!25 = !{!"Simple C/C++ TBAA"}
!26 = !DILocation(line: 4, column: 3, scope: !15)
!27 = !DILocation(line: 5, column: 9, scope: !15)
!28 = !DILocation(line: 11, column: 3, scope: !15)
*** IR Dump After GlobalDCEPass on [module] omitted because no change ***
*** IR Dump After EliminateAvailableExternallyPass on [module] omitted because no change ***
*** IR Dump After ReversePostOrderFunctionAttrsPass on [module] omitted because no change ***
*** IR Dump After RecomputeGlobalsAAPass on [module] omitted because no change ***
*** IR Dump After Float2IntPass on foo omitted because no change ***
*** IR Dump After LowerConstantIntrinsicsPass on foo omitted because no change ***
*** IR Dump After LoopSimplifyPass on foo ***
; ModuleID = 'implicit_preprocessed.ll'
source_filename = "implicit_preprocessed.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@g = dso_local local_unnamed_addr global i32 0, align 4, !dbg !0
@d = dso_local local_unnamed_addr global i32 0, align 4, !dbg !5

; Function Attrs: minsize nofree nounwind optsize sspstrong memory(readwrite, argmem: none) uwtable
define dso_local i32 @foo() local_unnamed_addr #0 !dbg !15 {
  call void @llvm.dbg.value(metadata ptr poison, metadata !19, metadata !DIExpression()), !dbg !21
  %1 = load i32, ptr @g, align 4, !tbaa !22
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %2, label %.critedge.preheader, !dbg !26

.critedge.preheader:                              ; preds = %0
  br label %.critedge, !dbg !27

.critedge:                                        ; preds = %.critedge.preheader, %.critedge
  br label %.critedge, !dbg !27

2:                                                ; preds = %0
  %d.promoted = load i32, ptr @d, align 4, !tbaa !22
  ret i32 %d.promoted, !dbg !28
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

attributes #0 = { minsize nofree nounwind optsize sspstrong memory(readwrite, argmem: none) uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!8, !9, !10, !11, !12, !13}
!llvm.ident = !{!14}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "g", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 15.0.7", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, globals: !4, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "implicit_preprocessed.c", directory: "/home/michel/ETH/AST/llvm-project/example", checksumkind: CSK_MD5, checksum: "81ce551684fbaa4f3b88065f26c1ce40")
!4 = !{!5, !0}
!5 = !DIGlobalVariableExpression(var: !6, expr: !DIExpression())
!6 = distinct !DIGlobalVariable(name: "d", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !{i32 7, !"Dwarf Version", i32 5}
!9 = !{i32 2, !"Debug Info Version", i32 3}
!10 = !{i32 1, !"wchar_size", i32 4}
!11 = !{i32 8, !"PIC Level", i32 2}
!12 = !{i32 7, !"PIE Level", i32 2}
!13 = !{i32 7, !"uwtable", i32 2}
!14 = !{!"clang version 15.0.7"}
!15 = distinct !DISubprogram(name: "foo", scope: !3, file: !3, line: 2, type: !16, scopeLine: 2, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !18)
!16 = !DISubroutineType(types: !17)
!17 = !{!7}
!18 = !{!19}
!19 = !DILocalVariable(name: "i", scope: !15, file: !3, line: 3, type: !20)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!21 = !DILocation(line: 0, scope: !15)
!22 = !{!23, !23, i64 0}
!23 = !{!"int", !24, i64 0}
!24 = !{!"omnipotent char", !25, i64 0}
!25 = !{!"Simple C/C++ TBAA"}
!26 = !DILocation(line: 4, column: 3, scope: !15)
!27 = !DILocation(line: 5, column: 9, scope: !15)
!28 = !DILocation(line: 11, column: 3, scope: !15)
*** IR Dump After LCSSAPass on foo omitted because no change ***
*** IR Pass PassManager<Function> on foo ignored ***
*** IR Dump After LoopRotatePass on .critedge omitted because no change ***
*** IR Dump After LoopDeletionPass on .critedge omitted because no change ***
*** IR Pass PassManager<Loop, AnalysisManager<Loop, LoopStandardAnalysisResults&>, LoopStandardAnalysisResults&, LPMUpdater&> on .critedge ignored ***
*** IR Pass FunctionToLoopPassAdaptor on foo ignored ***
*** IR Dump After LoopDistributePass on foo omitted because no change ***
*** IR Dump After InjectTLIMappings on foo omitted because no change ***
*** IR Dump After LoopVectorizePass on foo omitted because no change ***
*** IR Dump After LoopLoadEliminationPass on foo omitted because no change ***
*** IR Dump After InstCombinePass on foo omitted because no change ***
*** IR Dump After SimplifyCFGPass on foo ***
; ModuleID = 'implicit_preprocessed.ll'
source_filename = "implicit_preprocessed.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@g = dso_local local_unnamed_addr global i32 0, align 4, !dbg !0
@d = dso_local local_unnamed_addr global i32 0, align 4, !dbg !5

; Function Attrs: minsize nofree nounwind optsize sspstrong memory(readwrite, argmem: none) uwtable
define dso_local i32 @foo() local_unnamed_addr #0 !dbg !15 {
  call void @llvm.dbg.value(metadata ptr poison, metadata !19, metadata !DIExpression()), !dbg !21
  %1 = load i32, ptr @g, align 4, !tbaa !22
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %2, label %.critedge, !dbg !26

.critedge:                                        ; preds = %0, %.critedge
  br label %.critedge, !dbg !27

2:                                                ; preds = %0
  %d.promoted = load i32, ptr @d, align 4, !tbaa !22
  ret i32 %d.promoted, !dbg !28
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

attributes #0 = { minsize nofree nounwind optsize sspstrong memory(readwrite, argmem: none) uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!8, !9, !10, !11, !12, !13}
!llvm.ident = !{!14}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "g", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 15.0.7", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, globals: !4, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "implicit_preprocessed.c", directory: "/home/michel/ETH/AST/llvm-project/example", checksumkind: CSK_MD5, checksum: "81ce551684fbaa4f3b88065f26c1ce40")
!4 = !{!5, !0}
!5 = !DIGlobalVariableExpression(var: !6, expr: !DIExpression())
!6 = distinct !DIGlobalVariable(name: "d", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !{i32 7, !"Dwarf Version", i32 5}
!9 = !{i32 2, !"Debug Info Version", i32 3}
!10 = !{i32 1, !"wchar_size", i32 4}
!11 = !{i32 8, !"PIC Level", i32 2}
!12 = !{i32 7, !"PIE Level", i32 2}
!13 = !{i32 7, !"uwtable", i32 2}
!14 = !{!"clang version 15.0.7"}
!15 = distinct !DISubprogram(name: "foo", scope: !3, file: !3, line: 2, type: !16, scopeLine: 2, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !18)
!16 = !DISubroutineType(types: !17)
!17 = !{!7}
!18 = !{!19}
!19 = !DILocalVariable(name: "i", scope: !15, file: !3, line: 3, type: !20)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!21 = !DILocation(line: 0, scope: !15)
!22 = !{!23, !23, i64 0}
!23 = !{!"int", !24, i64 0}
!24 = !{!"omnipotent char", !25, i64 0}
!25 = !{!"Simple C/C++ TBAA"}
!26 = !DILocation(line: 4, column: 3, scope: !15)
!27 = !DILocation(line: 5, column: 9, scope: !15)
!28 = !DILocation(line: 11, column: 3, scope: !15)
*** IR Dump After VectorCombinePass on foo omitted because no change ***
*** IR Dump After InstCombinePass on foo omitted because no change ***
*** IR Dump After LoopUnrollPass on foo ***
; ModuleID = 'implicit_preprocessed.ll'
source_filename = "implicit_preprocessed.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@g = dso_local local_unnamed_addr global i32 0, align 4, !dbg !0
@d = dso_local local_unnamed_addr global i32 0, align 4, !dbg !5

; Function Attrs: minsize nofree nounwind optsize sspstrong memory(readwrite, argmem: none) uwtable
define dso_local i32 @foo() local_unnamed_addr #0 !dbg !15 {
  call void @llvm.dbg.value(metadata ptr poison, metadata !19, metadata !DIExpression()), !dbg !21
  %1 = load i32, ptr @g, align 4, !tbaa !22
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %2, label %.critedge.preheader, !dbg !26

.critedge.preheader:                              ; preds = %0
  br label %.critedge, !dbg !27

.critedge:                                        ; preds = %.critedge.preheader, %.critedge
  br label %.critedge, !dbg !27

2:                                                ; preds = %0
  %d.promoted = load i32, ptr @d, align 4, !tbaa !22
  ret i32 %d.promoted, !dbg !28
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

attributes #0 = { minsize nofree nounwind optsize sspstrong memory(readwrite, argmem: none) uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!8, !9, !10, !11, !12, !13}
!llvm.ident = !{!14}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "g", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 15.0.7", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, globals: !4, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "implicit_preprocessed.c", directory: "/home/michel/ETH/AST/llvm-project/example", checksumkind: CSK_MD5, checksum: "81ce551684fbaa4f3b88065f26c1ce40")
!4 = !{!5, !0}
!5 = !DIGlobalVariableExpression(var: !6, expr: !DIExpression())
!6 = distinct !DIGlobalVariable(name: "d", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !{i32 7, !"Dwarf Version", i32 5}
!9 = !{i32 2, !"Debug Info Version", i32 3}
!10 = !{i32 1, !"wchar_size", i32 4}
!11 = !{i32 8, !"PIC Level", i32 2}
!12 = !{i32 7, !"PIE Level", i32 2}
!13 = !{i32 7, !"uwtable", i32 2}
!14 = !{!"clang version 15.0.7"}
!15 = distinct !DISubprogram(name: "foo", scope: !3, file: !3, line: 2, type: !16, scopeLine: 2, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !18)
!16 = !DISubroutineType(types: !17)
!17 = !{!7}
!18 = !{!19}
!19 = !DILocalVariable(name: "i", scope: !15, file: !3, line: 3, type: !20)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!21 = !DILocation(line: 0, scope: !15)
!22 = !{!23, !23, i64 0}
!23 = !{!"int", !24, i64 0}
!24 = !{!"omnipotent char", !25, i64 0}
!25 = !{!"Simple C/C++ TBAA"}
!26 = !DILocation(line: 4, column: 3, scope: !15)
!27 = !DILocation(line: 5, column: 9, scope: !15)
!28 = !DILocation(line: 11, column: 3, scope: !15)
*** IR Dump After WarnMissedTransformationsPass on foo omitted because no change ***
*** IR Dump After SROAPass on foo omitted because no change ***
*** IR Dump After InstCombinePass on foo omitted because no change ***
*** IR Dump After RequireAnalysisPass<OptimizationRemarkEmitterAnalysis, Function> on foo omitted because no change ***
*** IR Dump After LoopSimplifyPass on foo omitted because no change ***
*** IR Dump After LCSSAPass on foo omitted because no change ***
*** IR Pass PassManager<Function> on foo ignored ***
*** IR Dump After LICMPass on .critedge omitted because no change ***
*** IR Pass FunctionToLoopPassAdaptor on foo ignored ***
*** IR Dump After AlignmentFromAssumptionsPass on foo omitted because no change ***
*** IR Dump After LoopSinkPass on foo omitted because no change ***
*** IR Dump After InstSimplifyPass on foo omitted because no change ***
*** IR Dump After DivRemPairsPass on foo omitted because no change ***
*** IR Dump After TailCallElimPass on foo omitted because no change ***
*** IR Dump After SimplifyCFGPass on foo ***
; ModuleID = 'implicit_preprocessed.ll'
source_filename = "implicit_preprocessed.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@g = dso_local local_unnamed_addr global i32 0, align 4, !dbg !0
@d = dso_local local_unnamed_addr global i32 0, align 4, !dbg !5

; Function Attrs: minsize nofree nounwind optsize sspstrong memory(readwrite, argmem: none) uwtable
define dso_local i32 @foo() local_unnamed_addr #0 !dbg !15 {
  call void @llvm.dbg.value(metadata ptr poison, metadata !19, metadata !DIExpression()), !dbg !21
  %1 = load i32, ptr @g, align 4, !tbaa !22
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %2, label %.critedge, !dbg !26

.critedge:                                        ; preds = %0, %.critedge
  br label %.critedge, !dbg !27

2:                                                ; preds = %0
  %d.promoted = load i32, ptr @d, align 4, !tbaa !22
  ret i32 %d.promoted, !dbg !28
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

attributes #0 = { minsize nofree nounwind optsize sspstrong memory(readwrite, argmem: none) uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!8, !9, !10, !11, !12, !13}
!llvm.ident = !{!14}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "g", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 15.0.7", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, globals: !4, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "implicit_preprocessed.c", directory: "/home/michel/ETH/AST/llvm-project/example", checksumkind: CSK_MD5, checksum: "81ce551684fbaa4f3b88065f26c1ce40")
!4 = !{!5, !0}
!5 = !DIGlobalVariableExpression(var: !6, expr: !DIExpression())
!6 = distinct !DIGlobalVariable(name: "d", scope: !2, file: !3, line: 1, type: !7, isLocal: false, isDefinition: true)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !{i32 7, !"Dwarf Version", i32 5}
!9 = !{i32 2, !"Debug Info Version", i32 3}
!10 = !{i32 1, !"wchar_size", i32 4}
!11 = !{i32 8, !"PIC Level", i32 2}
!12 = !{i32 7, !"PIE Level", i32 2}
!13 = !{i32 7, !"uwtable", i32 2}
!14 = !{!"clang version 15.0.7"}
!15 = distinct !DISubprogram(name: "foo", scope: !3, file: !3, line: 2, type: !16, scopeLine: 2, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !18)
!16 = !DISubroutineType(types: !17)
!17 = !{!7}
!18 = !{!19}
!19 = !DILocalVariable(name: "i", scope: !15, file: !3, line: 3, type: !20)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!21 = !DILocation(line: 0, scope: !15)
!22 = !{!23, !23, i64 0}
!23 = !{!"int", !24, i64 0}
!24 = !{!"omnipotent char", !25, i64 0}
!25 = !{!"Simple C/C++ TBAA"}
!26 = !DILocation(line: 4, column: 3, scope: !15)
!27 = !DILocation(line: 5, column: 9, scope: !15)
!28 = !DILocation(line: 11, column: 3, scope: !15)
*** IR Pass PassManager<Function> on foo ignored ***
*** IR Pass ModuleToFunctionPassAdaptor on [module] ignored ***
*** IR Dump After GlobalDCEPass on [module] omitted because no change ***
*** IR Dump After ConstantMergePass on [module] omitted because no change ***
*** IR Dump After CGProfilePass on [module] omitted because no change ***
*** IR Dump After RelLookupTableConverterPass on [module] omitted because no change ***
*** IR Dump After AnnotationRemarksPass on foo omitted because no change ***
*** IR Pass ModuleToFunctionPassAdaptor on [module] ignored ***
*** IR Dump After VerifierPass on [module] omitted because no change ***
*** IR Dump After PrintModulePass on [module] omitted because no change ***
